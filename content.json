{"meta":{"title":"Rongkang's Blog","subtitle":"","description":"个人博客 | 爱养虫的小熊","author":"Rongkang Xiong","url":"https://rongkangxiong.top","root":"/"},"pages":[{"title":"categories","date":"2021-11-10T15:11:21.000Z","updated":"2021-11-11T13:52:23.827Z","comments":true,"path":"categories/index.html","permalink":"https://rongkangxiong.top/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2021-11-11T15:23:15.000Z","updated":"2021-11-11T15:23:15.489Z","comments":true,"path":"gallery/index.html","permalink":"https://rongkangxiong.top/gallery/index.html","excerpt":"","text":""},{"title":"经验分享","date":"2021-11-11T14:47:44.000Z","updated":"2021-11-11T14:48:06.280Z","comments":true,"path":"experience/index.html","permalink":"https://rongkangxiong.top/experience/index.html","excerpt":"","text":""},{"title":"课程","date":"2021-11-10T03:37:16.000Z","updated":"2021-11-10T15:05:14.496Z","comments":false,"path":"course/index.html","permalink":"https://rongkangxiong.top/course/index.html","excerpt":"","text":"大一课程大二课程大三课程大四课程研一课程研二课程"},{"title":"导航","date":"2021-11-10T02:14:35.000Z","updated":"2021-11-10T15:14:39.147Z","comments":true,"path":"guide/index.html","permalink":"https://rongkangxiong.top/guide/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-11-09T16:06:53.000Z","updated":"2021-11-10T15:03:09.481Z","comments":false,"path":"about/index.html","permalink":"https://rongkangxiong.top/about/index.html","excerpt":"","text":"关于我"},{"title":"read","date":"2021-11-10T18:04:50.000Z","updated":"2021-11-10T18:04:50.226Z","comments":true,"path":"read/index.html","permalink":"https://rongkangxiong.top/read/index.html","excerpt":"","text":""},{"title":"我的笔记","date":"2021-11-09T16:07:29.000Z","updated":"2021-11-10T15:07:32.767Z","comments":false,"path":"mynotes/index.html","permalink":"https://rongkangxiong.top/mynotes/index.html","excerpt":"","text":""},{"title":"资源","date":"2021-11-10T04:31:28.000Z","updated":"2021-11-10T15:12:58.294Z","comments":true,"path":"resources/index.html","permalink":"https://rongkangxiong.top/resources/index.html","excerpt":"","text":"各种软件资源各种编程资源"},{"title":"thinking","date":"2021-11-09T16:27:07.000Z","updated":"2021-11-09T16:27:07.608Z","comments":true,"path":"thinking/index.html","permalink":"https://rongkangxiong.top/thinking/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-11T13:50:12.000Z","updated":"2021-11-11T13:52:25.093Z","comments":true,"path":"tags/index.html","permalink":"https://rongkangxiong.top/tags/index.html","excerpt":"","text":""},{"title":"R语言常用代码","date":"2021-11-10T03:14:00.000Z","updated":"2021-11-10T11:09:25.798Z","comments":true,"path":"mynotes/Rcode/Rquery.html","permalink":"https://rongkangxiong.top/mynotes/Rcode/Rquery.html","excerpt":"","text":"tabel输出library(knitr) result &lt;- cbind(theta.hat, boot.theta.hat, bias,standard.error) #合并计算结果 dimnames(result)[[2]] &lt;- c(&quot;theta&quot;, &quot;Bootstrap theta.hat&quot;, &quot;bias&quot;, &quot;standard error&quot;) #重命名各列 kable(result, caption &#x3D; &quot;表1：用bootstrap估计theta.hat的bias和standard error&quot;) 表1.1：用bootstrap估计theta.hat的bias和standard error|theta| Bootstrap | theta.hat | bias standard error || - | :-: | -: | -: ||0.619115| 0.6199636| 0.0008486| 0.0477611|"},{"title":"","date":"2021-11-12T15:48:12.414Z","updated":"2021-11-12T15:48:12.414Z","comments":true,"path":"keep_html/color.html","permalink":"https://rongkangxiong.top/keep_html/color.html","excerpt":"","text":"颜色代码对照大全 Rongkang blog &nbsp;&nbsp;&gt;&gt;&nbsp;&nbsp; 颜色代码对照大全 c00000 c00020 c00040 c00060 c00080 c000a0 c000c0 c000ff c02000 c02020 c02040 c02060 c02080 c020a0 c020c0 c020ff c04000 c04020 c04040 c04060 c04080 c040a0 c040c0 c040ff c06000 c06020 c06040 c06060 c06080 c060a0 c060c0 c060ff c08000 c08020 c08040 c08060 c08080 c080a0 c080c0 c080ff c0a000 c0a020 c0a040 c0a060 c0a080 c0a0a0 c0a0c0 c0a0ff c0c000 c0c020 c0c040 c0c060 c0c080 c0c0a0 c0c0c0 c0c0ff c0ff00 c0ff20 c0ff40 c0ff60 c0ff80 c0ffa0 c0ffc0 c0ffff ff0000 ff0020 ff0040 ff0060 ff0080 ff00a0 ff00c0 ff00ff ff2000 ff2020 ff2040 ff2060 ff2080 ff20a0 ff20c0 ff20ff ff4000 ff4020 ff4040 ff4060 ff4080 ff40a0 ff40c0 ff40ff ff6000 ff6020 ff6040 ff6060 ff6080 ff60a0 ff60c0 ff60ff ff8000 ff8020 ff8040 ff8060 ff8080 ff80a0 ff80c0 ff80ff ffa000 ffa020 ffa040 ffa060 ffa080 ffa0a0 ffa0c0 ffa0ff ffc000 ffc020 ffc040 ffc060 ffc080 ffc0a0 ffc0c0 ffc0ff ffff00 ffff20 ffff40 ffff60 ffff80 ffffa0 ffffc0 ffffff 000000 000020 000040 000060 000080 0000a0 0000c0 0000ff 002000 002020 002040 002060 002080 0020a0 0020c0 0020ff 004000 004020 004040 004060 004080 0040a0 0040c0 0040ff 006000 006020 006040 006060 006080 0060a0 0060c0 0060ff 008000 008020 008040 008060 008080 0080a0 0080c0 0080ff 00a000 00a020 00a040 00a060 00a080 00a0a0 00a0c0 00a0ff 00c000 00c020 00c040 00c060 00c080 00c0a0 00c0c0 00c0ff 00ff00 00ff20 00ff40 00ff60 00ff80 00ffa0 00ffc0 00ffff 200000 200020 200040 200060 200080 2000a0 2000c0 2000ff 202000 202020 202040 202060 202080 2020a0 2020c0 2020ff 204000 204020 204040 204060 204080 2040a0 2040c0 2040ff 206000 206020 206040 206060 206080 2060a0 2060c0 2060ff 208000 208020 208040 208060 208080 2080a0 2080c0 2080ff 20a000 20a020 20a040 20a060 20a080 20a0a0 20a0c0 20a0ff 20c000 20c020 20c040 20c060 20c080 20c0a0 20c0c0 20c0ff 20ff00 20ff20 20ff40 20ff60 20ff80 20ffa0 20ffc0 20ffff 400000 400020 400040 400060 400080 4000a0 4000c0 4000ff 402000 402020 402040 402060 402080 4020a0 4020c0 4020ff 404000 404020 404040 404060 404080 4040a0 4040c0 4040ff 406000 406020 406040 406060 406080 4060a0 4060c0 4060ff 408000 408020 408040 408060 408080 4080a0 4080c0 4080ff 40a000 40a020 40a040 40a060 40a080 40a0a0 40a0c0 40a0ff 40c000 40c020 40c040 40c060 40c080 40c0a0 40c0c0 40c0ff 40ff00 40ff20 40ff40 40ff60 40ff80 40ffa0 40ffc0 40ffff 600000 600020 600040 600060 600080 6000a0 6000c0 6000ff 602000 602020 602040 602060 602080 6020a0 6020c0 6020ff 604000 604020 604040 604060 604080 6040a0 6040c0 6040ff 606000 606020 606040 606060 606080 6060a0 6060c0 6060ff 608000 608020 608040 608060 608080 6080a0 6080c0 6080ff 60a000 60a020 60a040 60a060 60a080 60a0a0 60a0c0 60a0ff 60c000 60c020 60c040 60c060 60c080 60c0a0 60c0c0 60c0ff 60ff00 60ff20 60ff40 60ff60 60ff80 60ffa0 60ffc0 60ffff 800000 800020 800040 800060 800080 8000a0 8000c0 8000ff 802000 802020 802040 802060 802080 8020a0 8020c0 8020ff 804000 804020 804040 804060 804080 8040a0 8040c0 8040ff 806000 806020 806040 806060 806080 8060a0 8060c0 8060ff 808000 808020 808040 808060 808080 8080a0 8080c0 8080ff 80a000 80a020 80a040 80a060 80a080 80a0a0 80a0c0 80a0ff 80c000 80c020 80c040 80c060 80c080 80c0a0 80c0c0 80c0ff 80ff00 80ff20 80ff40 80ff60 80ff80 80ffa0 80ffc0 80ffff a00000 a00020 a00040 a00060 a00080 a000a0 a000c0 a000ff a02000 a02020 a02040 a02060 a02080 a020a0 a020c0 a020ff a04000 a04020 a04040 a04060 a04080 a040a0 a040c0 a040ff a06000 a06020 a06040 a06060 a06080 a060a0 a060c0 a060ff a08000 a08020 a08040 a08060 a08080 a080a0 a080c0 a080ff a0a000 a0a020 a0a040 a0a060 a0a080 a0a0a0 a0a0c0 a0a0ff a0c000 a0c020 a0c040 a0c060 a0c080 a0c0a0 a0c0c0 a0c0ff a0ff00 a0ff20 a0ff40 a0ff60 a0ff80 a0ffa0 a0ffc0 a0ffff 红色和粉红色，以及它们的16进制代码。 #990033 #CC6699 #FF6699 #FF3366 #993366 #CC0066 #CC0033 #FF0066 #FF0033 #CC3399 #FF3399 #FF9999 #FF99CC #FF0099 #CC3366 #FF66CC #FF33CC #FFCCFF #FF99FF #FF00CC 紫红色，以及它们的16进制代码。 #FF66FF #CC33CC #CC00FF #FF33FF #CC99FF #9900CC #FF00FF #CC66FF #990099 #CC0099 #CC33FF #CC99CC #990066 #993399 #CC66CC #CC00CC #663366 &nbsp; &nbsp; &nbsp; 蓝色，以及它们的16进制代码。 #660099 #666FF #000CC #9933CC #666699 #660066 #333366 #0066CC #9900FF #333399 #99CCFF #9933FF #330099 #6699FF #9966CC #3300CC #003366 #330033 #3300FF #6699CC #663399 #3333FF #006699 #6633CC #3333CC #3399CC #6600CC #0066FF #0099CC #9966FF #0033FF #66CCFF #330066 #3366FF #3399FF #6600FF #3366CC #003399 #6633FF #000066 #0099FF #CCCCFF #000033 #33CCFF #9999FF #0000FF #00CCFF #9999CC #000099 #6666CC #0033CC &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 黄色、褐色、玫瑰色和橙色，以及它们的16进制代码。 #FFFFCC #FFCC00 #CC9000 #663300 #FF6600 #663333 #CC6666 #FF6666 #FF0000 #FFFF99 #FFCC66 #FF9900 #FF9966 #CC3300 #996666 #FFCCCC #660000 #FF3300 #FF6666 #FFCC33 #CC6600 #FF6633 #996633 #CC9999 #FF3333 #990000 #CC9966 #FFFF33 #CC9933 #993300 #FF9933 #330000 #993333 #CC3333 #CC0000 #FFCC99 #FFFF00 #996600 #CC6633 &nbsp; 绿色，以及它们的16进制代码。 #99FFFF #33CCCC #00CC99 #99FF99 #009966 #33FF33 #33FF00 #99CC33 #CCC33 #66FFFF #66CCCC #66FFCC #66FF66 #009933 #00CC33 #66FF00 #336600 #33300 #33FFFF #339999 #99FFCC #339933 #33FF66 #33CC33 #99FF00 #669900 #666600 #00FFFF #336666 #00FF99 #99CC99 #00FF66 #66FF33 #66CC00 #99CC00 #999933 #00CCCC #006666 #339966 #66FF99 #CCFFCC #00FF00 #00CC00 #CCFF66 #CCCC66 #009999 #003333 #006633 #33FF99 #CCFF99 #66CC33 #33CC00 #CCFF33 #666633 #669999 #00FFCC #336633 #33CC66 #99FF66 #006600 #339900 #CCFF00 #999966 #99CCCC #33FFCC #669966 #00CC66 #99FF33 #003300 #99CC66 #999900 #CCCC99 #CCFFFF #33CC99 #66CC66 #66CC99 #00FF33 #009900 #669900 #669933 #CCCC00 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 白色、灰色和黑色，以及它们的16进制代码。 #FFFFF #CCCCCC #999999 #666666 #333333 #000000 &nbsp; &nbsp; &nbsp; &nbsp; 16色和它们的16进制代码。 Aqua Black Fuchsia Gray Gree Lime Maroon Navy Olive Purple Red Silver Teal White Yellow Blue &nbsp; &nbsp; &nbsp; &nbsp; 当你要给你的网页添加颜色时，有时，你能够直接使用该颜色的名称，但是大多情况下，你只能使用十六进制代码来使用这些颜色。（浏览器能够理解这些代码。） 为了方便你去使用这些代码，我们制作了这个列表，右边是颜色，左边是十六进制代码。 Hex Code Color #FFFFFF &nbsp; #FFFFCC &nbsp; #FFFF99 &nbsp; #FFFF66 &nbsp; #FFFF33 &nbsp; #FFFF00 &nbsp; #FFCCFF &nbsp; #FFCCCC &nbsp; #FFCC99 &nbsp; #FFCC66 &nbsp; #FFCC33 &nbsp; #FFCC00 &nbsp; #FF99FF &nbsp; #FF99CC &nbsp; #FF9999 &nbsp; #FF9966 &nbsp; #FF9933 &nbsp; #FF9900 &nbsp; #FF66FF &nbsp; #FF66CC &nbsp; #FF6699 &nbsp; #FF6666 &nbsp; #FF6633 &nbsp; #FF6600 &nbsp; #FF33FF &nbsp; #FF33CC &nbsp; #FF3399 &nbsp; #FF3366 &nbsp; #FF3333 &nbsp; #FF3300 &nbsp; #FF00FF &nbsp; #FF00CC &nbsp; #FF0099 &nbsp; #FF0066 &nbsp; #FF0033 &nbsp; #FF0000 &nbsp; Hex Code Color #66FFFF &nbsp; #66FFCC &nbsp; #66FF99 &nbsp; #66FF66 &nbsp; #66FF33 &nbsp; #66FF00 &nbsp; #66CCFF &nbsp; #66CCCC &nbsp; #66CC99 &nbsp; #66CC66 &nbsp; #66CC33 &nbsp; #66CC00 &nbsp; #6699FF &nbsp; #6699CC &nbsp; #669999 &nbsp; #669966 &nbsp; #669933 &nbsp; #669900 &nbsp; #6666FF &nbsp; #6666CC &nbsp; #666699 &nbsp; #666666 &nbsp; #666633 &nbsp; #666600 &nbsp; #6633FF &nbsp; #6633CC &nbsp; #663399 &nbsp; #663366 &nbsp; #663333 &nbsp; #663300 &nbsp; #6600FF &nbsp; #6600CC &nbsp; #660099 &nbsp; #660066 &nbsp; #660033 &nbsp; #660000 &nbsp; Hex Code Color #CCFFFF &nbsp; #CCFFCC &nbsp; #CCFF99 &nbsp; #CCFF66 &nbsp; #CCFF33 &nbsp; #CCFF00 &nbsp; #CCCCFF &nbsp; #CCCCCC &nbsp; #CCCC99 &nbsp; #CCCC66 &nbsp; #CCCC33 &nbsp; #CCCC00 &nbsp; #CC99FF &nbsp; #CC99CC &nbsp; #CC9999 &nbsp; #CC9966 &nbsp; #CC9933 &nbsp; #CC9900 &nbsp; #CC66FF &nbsp; #CC66CC &nbsp; #CC6699 &nbsp; #CC6666 &nbsp; #CC6633 &nbsp; #CC6600 &nbsp; #CC33FF &nbsp; #CC33CC &nbsp; #CC3399 &nbsp; #CC3366 &nbsp; #CC3333 &nbsp; #CC3300 &nbsp; #CC00FF &nbsp; #CC00CC &nbsp; #CC0099 &nbsp; #CC0066 &nbsp; #CC0033 &nbsp; #CC0000 &nbsp; Hex Code Color #33FFFF &nbsp; #33FFCC &nbsp; #33FF99 &nbsp; #33FF66 &nbsp; #33FF33 &nbsp; #33FF00 &nbsp; #33CCFF &nbsp; #33CCCC &nbsp; #33CC99 &nbsp; #33CC66 &nbsp; #33CC33 &nbsp; #33CC00 &nbsp; #3399FF &nbsp; #3399CC &nbsp; #339999 &nbsp; #339966 &nbsp; #339933 &nbsp; #339900 &nbsp; #3366FF &nbsp; #3366CC &nbsp; #336699 &nbsp; #336666 &nbsp; #336633 &nbsp; #336600 &nbsp; #3333FF &nbsp; #3333CC &nbsp; #333399 &nbsp; #333366 &nbsp; #333333 &nbsp; #333300 &nbsp; #3300FF &nbsp; #3300CC &nbsp; #330099 &nbsp; #330066 &nbsp; #330033 &nbsp; #330000 &nbsp; Hex Code Color #99FFFF &nbsp; #99FFCC &nbsp; #99FF99 &nbsp; #99FF66 &nbsp; #99FF33 &nbsp; #99FF00 &nbsp; #99CCFF &nbsp; #99CCCC &nbsp; #99CC99 &nbsp; #99CC66 &nbsp; #99CC33 &nbsp; #99CC00 &nbsp; #9999FF &nbsp; #9999CC &nbsp; #999999 &nbsp; #999966 &nbsp; #999933 &nbsp; #999900 &nbsp; #9966FF &nbsp; #9966CC &nbsp; #996699 &nbsp; #996666 &nbsp; #996633 &nbsp; #996600 &nbsp; #9933FF &nbsp; #9933CC &nbsp; #993399 &nbsp; #993366 &nbsp; #993333 &nbsp; #993300 &nbsp; #9900FF &nbsp; #9900CC &nbsp; #990099 &nbsp; #990066 &nbsp; #990033 &nbsp; #990000 &nbsp; Hex Code Color #00FFFF &nbsp; #00FFCC &nbsp; #00FF99 &nbsp; #00FF66 &nbsp; #00FF33 &nbsp; #00FF00 &nbsp; #00CCFF &nbsp; #00CCCC &nbsp; #00CC99 &nbsp; #00CC66 &nbsp; #00CC33 &nbsp; #00CC00 &nbsp; #0099FF &nbsp; #0099CC &nbsp; #009999 &nbsp; #009966 &nbsp; #009933 &nbsp; #009900 &nbsp; #0066FF &nbsp; #0066CC &nbsp; #006699 &nbsp; #006666 &nbsp; #006633 &nbsp; #006600 &nbsp; #0033FF &nbsp; #0033CC &nbsp; #003399 &nbsp; #003366 &nbsp; #003333 &nbsp; #003300 &nbsp; #0000FF &nbsp; #0000CC &nbsp; #000099 &nbsp; #000066 &nbsp; #000033 &nbsp; #000000 &nbsp;"},{"title":"常见分布","date":"2021-11-11T03:14:00.000Z","updated":"2021-11-11T16:02:56.058Z","comments":true,"path":"mynotes/math/common_dstribute.html","permalink":"https://rongkangxiong.top/mynotes/math/common_dstribute.html","excerpt":"","text":"基本概念随机变量X的熵$$离散形式 \\quad H(x) =-E^X[ln(p_i)]= - \\sum_i p_i ln(p_i) , \\quad 规定 0\\cdot ln 0 =0 \\连续形式 \\quad H(x) =-E^X[ln(f(x))]= - \\int f(x) ln(f(x)) dx$$ 先验分布的熵$$先验参数: \\quad \\theta \\sim \\pi(\\theta) \\离散值: E_n(\\pi) = -E^\\theta[ln(p_i)] =-\\sum_i p_i ln(p_i) \\连续值: E_n(\\pi) = -E^\\theta[ln(p_i)] =- \\int\\pi(\\theta) ln(\\pi(\\theta)) d\\theta$$ K-L距离即K-L散度,一种量化两种概率分布P和Q之间差异的方式,又叫相对熵能帮助我们度量使用一个分布来近似另一个分布时所损失的信息 定义 $$\\begin{aligned}离散形式: \\quad D(P||Q) &amp;=E^{P}[lnP(x)-lnQ(x)] \\&amp; =\\sum_{i=1}^{n} P(x) ln \\frac{P(x)}{Q(x)} \\连续形式: \\quad D(P||Q) &amp;=E^{P}[lnP(x)-lnQ(x)] \\ &amp; = \\int P(x) ln \\frac{P(x)}{Q(x)} dx\\end{aligned}$$ 即数据的原始分布p和近似分布q之间的对数差值的期望如果继续用2为底的对数计算，则K-L散度值表示信息损失的二进制位数 相对熵的性质 (1) 尽管KL散度从直观上是个度量或距离函数,但它并不是一个真正的度量或者距离,因为它不具有对称性,即$$D(P||Q) \\neq D(Q||P)$$ (2) 相对熵的值为非负值,即$$D(P||Q)≥0$$ 位置参数和刻度参数fisher信息阵求解设样本分布族 ${f(x| \\theta),\\theta \\in \\Theta }$满足C-R正则条件,这里$\\theta=(\\theta_1,…,\\theta_p)$为p维参数向量.设$X=(X_1,…,X_n)$是从总体$f(x|\\theta)$抽样的i.i.d.样本.当$\\theta$无先验信息可用时,Jeffrey是用Fisher信息阵行列式的平方根作为$\\theta$的无信息先验 写出参数$\\theta$的对数似然函数$$\\begin{aligned}l(\\theta|x) = ln(\\prod_{i=1}^{n} f(x_i|\\theta)) = \\sum_{i=1}^{n} ln f(x_i|\\theta)\\end{aligned}$$ 求fisher信息矩阵 $$\\begin{aligned}&amp;I(\\theta) = (I_{ij}(\\theta)){p\\times p}, \\quad I{ij}(\\theta)=E^{X|\\theta} (-\\frac{\\partial^2 l}{\\partial\\theta_i \\partial \\theta_j}) , \\quad (i,j=1,…,p) \\&amp;特别的对于单参数情形 \\&amp; I(\\theta) = E^{X|\\theta} (-\\frac{\\partial^2 l}{\\partial\\theta^2})\\end{aligned}$$ Jeffreys无信息先验参数是1维情形下,Jeffreys被证明是相当成功的多参数不相关时使用Jeffreys时效果较好Bernardo(1979)找到了在多维场合修改的Jeffreys先验方法,即Reference先验 求$\\theta$的Jeffreys无信息先验密度$$\\begin{aligned}\\pi(\\theta) = [det I(\\theta)]^{1/2}\\end{aligned}$$ 最大熵先验先验均值被指定,寻找信息量最少的先验分布，即最大化熵的先验分布熵和K-L距离定义密切相关,因此可以看成带有约束的Reference先验 离散参数$\\theta$最大熵先验定理$\\theta$ 为离散型随机变量, 取值为 $\\theta_{1}, \\theta_{2}, \\cdots$(至多可列个值), $\\theta$ 的先验分布满足$$E^{\\pi}\\left[g_{k}(\\theta)\\right]=\\sum_{i} g_{k}\\left(\\theta_{i}\\right) \\pi\\left(\\theta_{i}\\right)=\\mu_{k} \\quad(k=1, \\cdots, m) \\text {, } \\tag{1}$$其中 $g_{k}(\\cdot), \\mu_{k}(k=1, \\cdots, m)$分别表示已知的函数和已知的常数 (当然, 此时还隐含条件$\\left.\\sum_{i} \\pi\\left(\\theta_{i}\\right)=1\\right)$, 则满足条件上式且使$E_{n}(\\pi)$ 最大化的解为$$\\bar{\\pi}\\left(\\theta_{i}\\right)=\\frac{\\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}\\left(\\theta_{i}\\right)\\right}}{\\sum_{i} \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}\\left(\\theta_{i}\\right)\\right}} \\quad(i=1,2, \\cdots) \\tag{2}$$其中 $\\lambda_{1}, \\cdots, \\lambda_{m}$ 使得当 $\\pi=\\bar{\\pi}$时(1)式成立, 即$$\\sum_{i} g_{k}\\left(\\theta_{i}\\right) \\bar{\\pi}\\left(\\theta_{i}\\right)=\\mu_{k} \\quad(k=1, \\cdots, m) \\tag{3}$$都成立.上述结果的推导超出本教材的范围,其证明可在很多变分法的书中找到,如(Calculus of Variations withApplications M. Ewing) 连续参数$\\theta$最大熵先验定理设 $\\theta$ 为 $\\Theta=(-\\infty, \\infty)$ 上的连续型随机变量, $\\theta$的先验分布 $\\pi(\\theta)$ 满足$$E^{\\pi}\\left[g_{k}(\\theta)\\right]=\\int_{\\Theta} g_{k}(\\theta) \\pi(\\theta) \\mathrm{d} \\theta=\\mu_{k} \\quad(k=1, \\cdots, m)$$其中 $g_{k}(\\cdot), \\mu_{k}(k=1, \\cdots, m)$分别表示已知的函数和已知的常数, 则满足条件 (2.6.5) 且 使 $E_{n}(\\pi)$最大化的解为$$\\tilde{\\pi}(\\theta)=\\frac{\\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right}}{\\int_{\\Theta} \\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right} \\mathrm{d} \\theta}$$其中 $\\lambda_{1}, \\cdots, \\lambda_{m}$ 使得当 $\\pi=\\tilde{\\pi}$ 时式(2.6.5) 成立, 即$$\\int_{\\Theta} g_{k}(\\theta) \\tilde{\\pi}(\\theta) \\mathrm{d} \\theta=\\mu_{k} \\quad(k=1, \\cdots, m)$$都成立. 求解步骤 确定$m,g_1(\\theta),\\cdots,g_k(\\theta)$ 化简$\\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right}$ $\\bar{\\pi}(\\theta) \\propto \\pi_{0}(\\theta) \\cdot exp {\\sum_{k=1}^{m} \\lambda_{k}g_{k}(\\theta)}$ 利用归一化常数A,带入$E^{\\bar{\\pi}}(g_k(\\theta)) = \\mu_k$求解$\\lambda_k$ 得出$\\bar{\\pi}(\\theta)$正比表达式 求归一化常数A 得出$\\theta$的最大熵先验$\\bar{\\pi}(\\theta)$ Reference先验最早由Bernardo(1979)提出多维场合修改的Jeffreys先验,将多维参数分为感兴趣的参数和多余(nuisance)参数基本思想:获得观测数据后,使得参数的先验分布和后验分布之间的K-L距离最大 Reference先验定义 设样本 $X=\\left(X_{1}, \\cdots, X_{n}\\right)$ 的分布族为 ${p(x \\mid \\theta), \\theta \\in$ $\\theta}$, 其中 $\\theta$ 为参数 (或参数向量), $\\Theta$ 为参数空间; $\\theta$ 的先验分布为 $\\pi(\\theta)$ 令 $\\mathscr{P}={\\pi(\\theta)$ $\\left.0: \\int_{\\Theta} \\pi(\\boldsymbol{\\theta} \\mid x) d \\boldsymbol{\\theta}&lt;\\infty\\right}$,此处 $\\pi(\\boldsymbol{\\theta} \\mid x)$ 为 $\\theta$ 的后验分布. 设先验分布 $\\pi(\\boldsymbol{\\theta})$ 与后验分布 $\\pi(\\boldsymbol{\\theta} \\mid \\boldsymbol{x})$ 的 $K-L$ 距离关于样本 $X$ 的期望为 $$ I_{\\pi(\\theta)}(\\boldsymbol{\\theta}, \\boldsymbol{x})=\\int_{\\mathscr{X}^{(n)}} p(\\boldsymbol{x})\\left[\\int_{\\Theta} \\pi(\\boldsymbol{\\theta} \\mid x) \\ln \\frac{\\pi(\\boldsymbol{\\theta} \\mid \\boldsymbol{x})}{\\pi(\\boldsymbol{\\theta})} \\mathrm{d} \\boldsymbol{\\theta}\\right] \\mathrm{d} \\boldsymbol{x} \\tag{1}$$ 其中 $\\mathscr{X}^{(n)}=\\mathscr{X}{1} \\times \\cdots \\times \\mathscr{X}{1}$ 为样本空间, $p(x)=\\int_{\\Theta} p(x \\mid \\theta) \\pi(\\boldsymbol{\\theta}) \\mathrm{d} \\boldsymbol{\\theta}$ 为样本 $\\mathrm{X}$ 的边缘密度. 若 $\\pi^{}(\\boldsymbol{\\theta}) \\in \\mathscr{P}$, 且满足 $$ I_{\\pi^{}(\\theta)}(\\theta, x)=\\max {\\pi(\\theta) \\in \\mathscr{P}} I{\\pi(\\theta)}(\\theta, x) \\tag{2} $$ 则称 $$\\pi^{*}(\\theta) = arg \\max {\\pi(\\theta) \\in \\mathscr{P}}I{\\pi(\\theta)}(\\theta, x) \\tag{3}$$ 为参数$\\theta$的Reference先验 Reference先验的计算 利用上式很难得到解析表达式,数值方法获得也很困难,替代办法是用渐进方法获得解析表达式 设X 表示一个简单试验的观测结果,向量$X^{(k)}=(X_1,\\cdots,X_k)$的分量由随机变量$X$的$k$个独立复制组成,令 $$ I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)=\\int_{x^{(k)}} p\\left(x^{(k)}\\right)\\left[\\int_{\\theta} \\pi\\left(\\theta \\mid x^{(k)}\\right) \\ln \\frac{\\pi\\left(\\theta \\mid x^{(k)}\\right)}{\\pi(\\theta)} \\mathrm{d} \\theta\\right] \\mathrm{d} x^{(k)} \\tag{4} $$ 通过最大化$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)$,得到$\\pi_{k}(\\theta)=\\arg \\max {\\pi(\\theta)} I{\\pi(\\theta)}\\left(\\theta,x^{(k)}\\right)$为了找到$\\pi_{k}$的更方便的形式,改写$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)$如下:$$\\begin{aligned}I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right) &amp;=\\int_{X^{(k)}} p\\left(x^{(k)}\\right)\\left[\\int_{\\theta} \\pi\\left(\\theta \\mid x^{(k)}\\right) \\ln \\frac{\\pi\\left(\\theta \\mid x^{(k)}\\right)}{\\pi(\\theta)} \\mathrm{d} \\theta\\right] \\mathrm{d} x^{(k)} \\&amp;=\\int_{\\theta} \\pi(\\theta)\\left{\\int_{X^{(k)}} p\\left(x^{(k)} \\mid \\theta\\right)\\left[\\ln \\pi\\left(\\theta \\mid x^{(k)}\\right)-\\ln \\pi(\\theta)\\right] \\mathrm{d} x^{(k)}\\right} \\mathrm{d} \\theta \\&amp;= \\int_{\\Theta} \\pi(\\theta) \\ln \\frac{f_{k}(\\theta)}{\\pi(\\theta)} \\mathrm{d} \\theta\\end{aligned} \\tag{5}$$ 此处$$\\begin{aligned}f_{k}(\\theta)=\\exp \\left{\\int_{\\mathscr{x}^{-(k)}} p\\left(x^{(k)} \\mid \\theta\\right) \\ln \\pi\\left(\\theta \\mid x^{(k)}\\right) \\mathrm{d} x^{(k)}\\right} \\tag{6} \\此处 \\pi(\\theta|x^{(k)}) 近似 N(\\hat{\\theta},I(\\theta))\\end{aligned}$$利用拉格朗日求条件极值的方法,在$\\int \\pi(\\theta) \\mathrm{d} \\theta=1$的条件下求$$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)=\\int_{\\Theta} \\pi(\\theta) \\ln \\frac{f_{k}(\\theta)}{\\pi(\\theta)} \\mathrm{d} \\theta \\tag{7}$$的极大值.利用变分法求解,可知其解$\\pi_{k}(\\theta) \\propto f_{k}(\\theta)$. Berger 等(2009)证明了在适当条件下 $\\theta$ 的 Reference 先验为$$\\pi^{*}(\\theta)=\\lim_{k \\rightarrow \\infty} \\frac{f_{k}(\\theta)}{f_{k}\\left(\\theta_{0}\\right)} \\tag{8}$$此处 $\\theta_{0}$ 是参数空间 $\\theta$ 的一个内点, $f_{k}(\\theta)$由式(6)给出. 当存在多余参数时 Reference 先验的计算 在我们所讨论的统计模型中,当参数是多维时,我们感兴趣的参数常常是其中的一个参数(或某些参数的子集),其余的视为多余参数.此时求多参数情形下的无信息先验,可利用 Reference 先验来处理. 其中的某些步聚可简化成一维的情形,通过计算 Jeffreys 先验获得.具体说明如下. 设似然函数为 $p(x \\mid \\theta, \\lambda)$, 此处 $\\theta$ 为感兴趣的参数, 而 $\\lambda$ 为多余参数. 我们希望找到 联合的无信息先验分布 $\\pi(\\theta, \\lambda)$. 处理这种带有多余参数的方法按下列步骤: (1) 固定$\\theta$,用标准的Reference先验方法获得$\\pi(\\lambda\\mid\\theta)$(如果$\\lambda$是一维的,将$\\theta$看成常数,计算Jeffreys 先验, 获得$\\pi(\\lambda \\mid \\theta)$). (2) 如果$\\pi(\\lambda\\mid\\theta)$是正常的先验,对$\\lambda$积分得到 $$ p(x \\mid \\theta)=\\int p(x \\mid \\theta, \\lambda) \\pi(\\lambda \\mid \\theta) \\mathrm{d} \\lambda \\tag{9} $$ (3) 用$p(x \\mid \\theta)$计算Reffreys先验,获得$\\pi(\\theta)$)(如果$\\theta$是一维的,利用$p(x|\\theta)$)计算Jeffreys先验,获得$\\pi(\\theta)$ (4) $\\theta$ 和 $\\lambda$的联合先验为 $\\pi(\\theta,\\lambda)=\\pi(\\lambda|\\theta)\\pi(\\theta)$ 两参数的Reference 先验的计算 设$\\theta=(\\theta_1,\\theta_2)$,其中$\\theta_1$为感兴趣的参数,$\\theta_2$为多余参数,令 $$ I\\left(\\theta_{1}, \\theta_{2}\\right)=\\left(\\begin{array}{ll} I_{11}\\left(\\theta_{1}, \\theta_{2}\\right) &amp; I_{12}\\left(\\theta_{1}, \\theta_{2}\\right) \\ I_{21}\\left(\\theta_{1}, \\theta_{2}\\right) &amp; I_{22}\\left(\\theta_{1}, \\theta_{2}\\right) \\end{array}\\right) \\tag{10} $$ 为$\\left(\\theta_{1}, \\theta_{2}\\right)$ 的Fisher信息阵. $\\left(\\theta_{1}, \\theta_{2}\\right)$的Reference先验可按下面四个步骤获得 (1) 求给定 $\\theta_{1}$ 时 $\\theta_{2}$ 的 Reference 先验 $\\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)$由于在一维的情形下Reference先验与Jeffreys先验相同, 所以取$\\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)=\\left|I_{22}\\left(\\theta_{1}, \\theta_{2}\\right)\\right|^{1 / 2}$. (2) 选取$\\left(\\theta_{1},\\theta_{2}\\right)$的参数空间$\\Theta$上的紧子集(一维闭区间或多维有限闭集概念的推广) $$ \\Theta_1\\subset\\Theta_2\\subset\\cdots,满足\\bigcup_{i=1}^{\\infty} \\Theta_i = \\Theta \\ 且对 \\forall \\theta_1,使得\\pi(\\theta_2|\\theta_1) \\quad 在集合 \\quad \\Omega_{i,\\theta_1} = {\\theta_2:(\\theta_1,\\theta_2)\\in\\Theta_i} \\quad 上是有限的 \\ 将 \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)在 \\Omega_{i, \\theta_{1}}上正则化,得到 $$ $$ \\pi_{i}\\left(\\theta_{2} \\mid \\theta_{1}\\right)=K_{i}\\left(\\theta_{1}\\right) \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) I_{\\Omega_{i, o_{1}}}\\left(\\theta_{2}\\right) \\tag{11} $$ 其中 $I_{A}(x)$ 表示集合 $A$ 上的示性函数,而$K_{i}\\left(\\theta_{1}\\right)=1 / \\int_{\\Omega_{i, 0},} \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) \\mathrm{d} \\theta_{2} .$(3) 求参数 $\\theta_{1}$ 关于$\\pi_{i}\\left(\\theta_{2} \\mid \\theta_{1}\\right)$ 的边缘Reference先验$\\pi_{i}\\left(\\theta_{1}\\right)$, 其公式为 $$\\pi_{i} (\\theta_1)=\\exp {\\frac{1}{2}\\int_{\\Omega_{i,\\theta_1}}\\pi_{i}(\\theta_{2} \\mid \\theta_{1})\\ln\\frac{|I(\\theta_{1}, \\theta_{2})|}{|I_{22}(\\theta_{1},\\theta_{2})|}d\\theta_{2} } \\tag{12}$$此处 $I\\left(\\theta_{1}, \\theta_{2}\\right)$ 和$I_{22}\\left(\\theta_{1}, \\theta_{2}\\right)$ 由式(10)给出 (4) 求极限得到$\\left(\\theta_{1}, \\theta_{2}\\right)$ 的 Reference 先验$$\\pi\\left(\\theta_{1}, \\theta_{2}\\right)=\\lim_{i \\rightarrow \\infty}\\left[\\frac{K_{i}\\left(\\theta_{1}\\right) \\pi_{i}\\left(\\theta_{1}\\right)}{K_{i}\\left(\\theta_{10}\\right) \\pi_{i}\\left(\\theta_{10}\\right)}\\right] \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) \\tag{13}$$比处假定极限存在, $\\theta_{10}$ 为任一固定点 例题1设 $X \\sim N\\left(\\mu, \\sigma^{2}\\right)$.求$\\theta=\\left(\\mu, \\sigma^{2}\\right)$的(1) Jeffreys 先验(2) Reference先验 数学函数及统计方法$\\Gamma$函数$$\\Gamma(\\alpha) = \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx$$ $\\beta$函数离散分布伯努利分布（又称之为二点分布或者0-1分布） 密度分布函数 数字特征 性质 $\\theta$为伯努利试验中成功概率,失败概率为$1-\\theta$ $P(x)= \\theta^x(1-\\theta)^{1-x}$ 二项分布(N重伯努利实验)$X \\sim B(n,\\theta)$ 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 $\\theta$为伯努利试验中成功概率,失败概率为$1-\\theta$,则在n次独立的伯努利试验中，成功次数$X \\sim B(n,\\theta)$ $$P(X = k|\\theta) = C_k^n \\theta^k(1-\\theta)^{n-k} \\quad , k = 0,1,2,…,n $$ ## 负二项分布$Nb(r,\\theta)$,又称帕斯卡分布 已知一个事件在伯努利试验中每次的出现概率是p,在一连串伯努利试验中,一件事件刚好在第r+x次试验出现第r次的概率 密度分布函数 $$f(x;r,p) = C_{x}^{x+r-1}p^r(1-p)^x ,\\quad x=0,1,…$$ 数字特征$$ \\begin{aligned} E[x] &amp; = np \\ Var[x] &amp;= np(1-p) \\ mod[x] &amp;=[(n+1)p] \\end{aligned} $$ 性质 多项分布随机实验如果有k个可能结局$A_1,A_2,…,A_k$，分别将他们的出现次数记为随机变量$X_1,X_2,…,X_k$，它们的概率分布分别是$p_1,p_2,…,p_k$，那么在n次采样的总结果中，$A_1$出现$n_1$次、$A_2$出现$n_2$次、…、$A_k$出现$n_k$次的这种事件的出现概率$P$有下面公式 密度分布函数 $$ \\begin{aligned} P(X_1=n_1,…,X_k=n_k;p_1,…,p_k) =&amp;\\left{\\begin{array}{l} \\frac{n!}{n_1!\\cdots n_k!} p_1^{n_1}\\cdots p_n^{n_k}, \\quad \\sum_{i=1}^{k}n_i=n, \\sum_{i=1}^{k}p_i=1\\ 0, otherwise \\end{array}\\right. \\ \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x_1,\\cdots,x_k] &amp; = (np_1,\\cdots,np_k) \\ Var[x_i] &amp;= np_i(1-p_i) , \\quad i=1,\\cdots,k\\ mod[x] &amp;= \\end{aligned} $$ 性质 最大似然估计$$ \\begin{aligned} 用拉格朗日陈志发，得到带参数限制的似然函数 \\ l(D|p_1,…,p_n,n) &amp; =ln(\\prod_{i=1}^{N} \\frac{n!}{n_{i1}!\\cdots n_{ik}!} )+(\\sum_{i=1}^{N}\\sum_{j=1}^{k} n_{ij}ln(p_j)) + \\alpha(1-\\sum_{j=1}^{k}p_j)\\ 对 p 求导 \\ \\frac{\\partial}{\\partial p_j}ln P(x|p) &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{p_j}-\\alpha = 0\\ \\Rightarrow p_j &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{\\alpha} \\Rightarrow 1=\\sum_{j=1}^{k}\\frac{\\sum_{i=1}^{N}n_{ij}}{\\alpha} \\Rightarrow \\alpha = N\\cdot k\\ p_j &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{N\\cdot k} \\end{aligned} $$ 泊松分布(Poisson distribution) 密度分布函数 $$ \\begin{aligned} P(x=k;\\lambda) = \\frac{\\lambda^k}{k!}e^{-\\lambda},\\quad \\lambda&gt;0,k=0,1,… \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\lambda \\ Var[x] &amp;= \\lambda \\end{aligned} $$ 泊松分布的Jeffreys先验 $\\pi(\\theta) = \\sqrt{I(\\theta)} = \\sqrt{\\frac{n}{\\lambda}}$ $$ \\begin{aligned} f(x;\\lambda) &amp;= \\frac{\\lambda^x}{x!}e^{-\\lambda},\\quad \\lambda&gt;0,x=0,1,… \\ E[x] &amp;= \\lambda \\ L(\\lambda|x_1,…,x_n) &amp;= \\frac{\\lambda^{x_1+…+x_n}}{x_1!\\cdots x_n!}e^{-n\\lambda} \\ l(\\lambda|x_1,…,x_n) &amp;= \\sum_{i=1}^n x_iln(\\lambda)-n\\lambda+ln(x_1!\\cdots x_n!) \\ \\frac{\\partial}{\\partial \\lambda}ln f(x|\\lambda) &amp;= \\frac{\\sum_{i=1}^{n} x_i}{\\lambda}-n \\ \\frac{\\partial^2}{\\partial \\lambda^2}ln f(x|\\lambda) &amp;= -\\frac{\\sum_{i=1}^n x_i}{\\lambda^2}\\ I(\\lambda) &amp; = \\sum_{x_1,\\cdots,x_n =0}^{\\infty} \\frac{\\sum_{i=1}^n x_i}{\\lambda^2}\\frac{\\lambda^{x_1+…+x_n}}{x_1!\\cdots x_n!}e^{-n\\lambda} \\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125; \\sum_&#123;i=1&#125;^&#123;n&#125; [(\\sum_&#123;x_i=0&#125;^&#123;\\infty&#125; \\frac&#123;x_i\\lambda^&#123;x_i&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_i!&#125;) \\prod_&#123;j\\neq i&#125;^&#123;n&#125; (\\sum_&#123;x_j=0&#125;^&#123;\\infty&#125;\\frac&#123;\\lambda^&#123;x_j&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_j!&#125;)] \\\\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125; \\sum_&#123;i=1&#125;^&#123;n&#125; (\\sum_&#123;x_i=0&#125;^&#123;\\infty&#125; \\frac&#123;x_i\\lambda^&#123;x_i&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_i!&#125;)\\\\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125;\\sum_&#123;i=1&#125;^&#123;n&#125; \\lambda \\\\ &amp; = \\frac&#123;n&#125;&#123;\\lambda&#125; \\\\ \\pi(\\theta) &amp;= \\sqrt{I(\\theta)} = \\sqrt{\\frac{n}{\\lambda}} \\end{aligned} $$ 性质 连续分布均匀分布 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 指数分布 密度分布函数 $$ \\begin{aligned} f(x;\\lambda) = \\left{\\begin{array}{l} 0 ,\\quad x \\leq 0 \\ \\lambda e^{-\\lambda x}, \\theta &gt; 0 \\end{array}\\right. \\end{aligned} $$ 分布函数 $$ \\begin{aligned} F(x;\\lambda) = \\left{\\begin{array}{l} 0 ,\\quad x \\leq 0 \\ 1-e^{-\\lambda x}, x &gt; 0 \\end{array}\\right. \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\frac{1}{\\lambda} \\ Var[x] &amp;= \\frac{1}{\\lambda^2}\\ \\end{aligned} $$ 性质 无记忆性: $s,t\\geq 0 \\Rightarrow P(T&gt;s+t|T&gt;t) = P(T&gt;s)$ 正态分布 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 对数正态分布$LN(x;\\mu,\\sigma^2)$ 密度分布函数 $$ \\begin{aligned} &amp;LN(x;\\mu,\\sigma^2) = \\frac{1}{x\\sqrt{2\\pi\\sigma^2}}exp{-\\frac{1}{2\\sigma^2}(ln(x)-\\mu)^2 },\\quad x&gt;0 \\ &amp;\\mu是位置参数,\\sigma&gt;0 是刻度参数 \\end{aligned} $$ 数字特征 $$ \\begin{aligned} &amp; E(x)=e^{\\mu+\\frac{1}{2}\\sigma^2}, \\quad n&gt;1 \\ &amp; Var(x) = (e^{\\sigma^2}-1)e^{2\\mu+\\sigma^2}, \\quad n&gt;2\\ &amp; Mode(x) = e^{\\mu-\\sigma^2} \\end{aligned} $$ 性质 t分布 $\\tau(x;n,\\mu,\\sigma)$ 密度分布函数 $$ \\begin{aligned} \\tau(x;n,\\mu,\\sigma) = \\frac{1}{\\sigma}\\frac{\\Gamma(\\frac{n+1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{1}{n}(\\frac{x-\\mu}{\\sigma})^2)^{-\\frac{n+1}{2}} \\ n&gt;0 为自由度, \\mu为位置参数,\\sigma&gt;0为刻度参数 \\end{aligned} $$ 数字特征 $$ \\begin{aligned} &amp;E[x]=\\mu,n&gt;1 \\ &amp;Var[x] = \\frac{n\\sigma^2}{n-2},n&gt;2\\ &amp;Mode[x] = x \\ \\end{aligned} $$ 卡方分布$\\chi_{n}^2$ 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 F分布 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 伽马分布$\\Gamma(x;\\alpha,\\lambda)$ 密度分布函数 $$ \\begin{aligned} \\Gamma(x;\\alpha,\\lambda) =&amp;\\left{\\begin{array}{l} \\frac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha-1} e^{-\\lambda x}, x \\geq 0 \\ 0, x&lt;0 \\end{array}\\right. \\ \\Gamma(\\alpha) =&amp; \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\frac{\\alpha}{\\lambda} \\ Var[x] &amp;= \\frac{\\alpha}{\\lambda^2} \\ mod[x] &amp;= \\end{aligned} $$ 性质 逆伽马分布 密度分布函数 $$ \\begin{aligned} \\Gamma^{-1}(\\theta;\\alpha,\\lambda)=&amp; \\left{\\begin{array}{l} \\frac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\theta^{-(\\alpha+1)} \\exp \\left(-\\frac{\\lambda}{\\theta}\\right) \\quad, \\theta \\geq 0 \\ 0 \\quad, \\theta&lt;0 \\end{array}\\right. \\ \\Gamma(\\alpha) =&amp; \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 帕雷托分布$Pa(\\theta_0,\\alpha)$ 密度分布函数 $$ \\begin{aligned} \\pi(\\theta;x_{min},k) &amp;=\\left{\\begin{array}{l} 0 ,\\quad \\theta \\leq x_{min}\\ \\frac{kx_{min}^{k}}{\\theta^{k+1}}, \\theta &gt; x_{min} \\end{array}\\right. \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 柯西分布 密度分布函数 $$ \\begin{aligned} f(x;) = \\end{aligned} $$ 数字特征 $$ \\begin{aligned} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{aligned} $$ 性质 统计检验量单变量偏度系数(Skewness test of normality)$$\\sqrt{\\beta_1} = \\frac{E[(X-\\mu)^3]}{\\sigma_X^3}, \\mu_X= E[X],\\sigma_X^2=Var[X] \\样本偏度 :\\sqrt{b_1}=\\frac{\\frac{1}{n}\\sum_{i=1}^n (X_i-\\bar{X})^3}{(\\frac{1}{n}\\sum_{i=1}^n(X_i-\\bar{X})^2)^{3/2}} \\如果X是正态的,那么\\sqrt{b_1} \\sim N(0,\\frac{6}{n}) \\而对于有限的采样 Var(\\sqrt{b_1}) = \\frac{6(n-2)}{(n+1)(n+3)} 会使得 Type \\ I\\ error\\ rate与\\alpha相当$$ 多变量偏度系数$$\\begin{aligned}\\beta_{1, d}=E[(X-\\mu)^{T} \\Sigma^{-1}(Y-\\mu)]^{3}\\end{aligned}$$ Under normality, $\\beta_{1, d}=0 .$ The multivariate skewness statisticis$$b_{1, d}=\\frac{1}{n^{2}} \\sum_{i, j=1}^{n}\\left(\\left(X_{i}-\\bar{X}\\right)^{T} \\widehat{\\Sigma}^{-1}\\left(X_{j}-\\bar{X}\\right)\\right)^{3}$$ t检验两正态样本t检验$$T(x, y)=\\frac{\\sqrt{\\frac{m n}{m+n}}(\\bar{x}-\\bar{y})}{\\sqrt{\\frac{1}{m+n-2}\\left[\\sum_{i=1}^{m}\\left(x_{i}-\\bar{x}\\right)^{2}+\\sum_{j=1}^{n}\\left(y_{i}-\\bar{y}\\right)^{2}\\right]}}$$","author":"爱养虫的小熊"},{"title":"HDF5文件使用方法","date":"2021-11-12T05:25:55.000Z","updated":"2021-11-12T05:54:44.439Z","comments":true,"path":"mynotes/实验数据分析/HDF5文件打开使用方法.html","permalink":"https://rongkangxiong.top/mynotes/%E5%AE%9E%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/HDF5%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html","excerpt":"写在前面HDF5, 大量(海量?)数据存储的一种解决方案. HDF的全称是Hiearchical Data FormatHDF5 文件一般以 .h5 或者 .hdf5 作为后缀名，需要专门的软件才能打开预览文件的内容HDF5 文件结构中有 2 primary objects: Groups 和 Datasets。","text":"写在前面HDF5, 大量(海量?)数据存储的一种解决方案. HDF的全称是Hiearchical Data FormatHDF5 文件一般以 .h5 或者 .hdf5 作为后缀名，需要专门的软件才能打开预览文件的内容HDF5 文件结构中有 2 primary objects: Groups 和 Datasets。","author":"爱养虫的小熊"},{"title":"如何分析线虫数据","date":"2021-11-12T04:58:19.995Z","updated":"2021-11-12T04:58:19.995Z","comments":true,"path":"mynotes/实验数据分析/如何分析线虫数据.html","permalink":"https://rongkangxiong.top/mynotes/%E5%AE%9E%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E7%BA%BF%E8%99%AB%E6%95%B0%E6%8D%AE.html","excerpt":"分析线虫数据","text":"分析线虫数据","author":"爱养虫的小熊"},{"title":"用WormPose导入用Tierpsy tracker产生的数据","date":"2021-11-12T05:25:55.000Z","updated":"2021-11-12T14:12:04.546Z","comments":true,"path":"mynotes/实验数据分析/用WormPose导入Tierpsy产生的数据.html","permalink":"https://rongkangxiong.top/mynotes/%E5%AE%9E%E9%AA%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%94%A8WormPose%E5%AF%BC%E5%85%A5Tierpsy%E4%BA%A7%E7%94%9F%E7%9A%84%E6%95%B0%E6%8D%AE.html","excerpt":"","text":"下载视频转换软件FijiFiji软件 通过将loader声明为tierpsy dataset_loader&#x3D;&quot;tierpsy&quot; 为实验创建一个根目录，里面包含记录的视频，目录结构如下 +-- dataset_path | +-- video_name0 | | +-- video_name0.hdf5 | | +-- video_name0_features.hdf5 or video_name0_featuresN.hdf5 | +-- video_name1 | | +-- video_name1.hdf5 | | +-- video_name1_features.hdf5 or video_name1_featuresN.hdf5 | ... 限制在Tierpsy中选取 提取时间戳选项(即 is_extract_timestamp)以便在hdf5文件中设置字段timestamp/raw，没有时间戳的配置文件在WormPose中不支持每个文件中包含多个线虫 indexes的 Tierpsy files，WormPose将只加载一个线虫文件，即具有最小的index的文件 高级使用Tierpsy 数据集加载器使用默认的SimpleFrameProcessing class从背景对线虫进行分割。如果这不适用于您的图像，并且您具有从后台分割蠕虫的自定义功能，则应实现自定义数据集加载器。您仍然可以使用提供的分层框架数据集和功能数据集，但您将需要重新执行帧预处理。以toy_dataset为例，添加自定义数据集加载器，如下所示： from wormpose import BaseFramePreprocessing # We use the Tierpsy loaders from WormPose from wormpose.dataset.loaders.tierpsy import FramesDataset, FeaturesDataset # But we redefine a custom frame preprocessing function class FramePreprocessing(BaseFramePreprocessing): def process(self, frame) segmented_frame &#x3D; #TODO segment the frame, or load if precalculated background_color &#x3D; #TODO find the background color return segmented_frame, background_color WormPose函数使用手册wormpose.dataset.loader","author":"爱养虫的小熊"}],"posts":[{"title":"常用网址查询","slug":"常用网址查询","date":"2021-11-12T15:49:49.000Z","updated":"2021-11-12T15:53:07.313Z","comments":true,"path":"/post/常用网址查询.html","link":"","permalink":"https://rongkangxiong.top/post/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2.html","excerpt":"颜色代码查询https://rongkangxiong.top/keep_html/color.html","text":"颜色代码查询https://rongkangxiong.top/keep_html/color.html","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[],"author":"爱养虫的小熊"},{"title":"如何使用Google的Colab","slug":"如何使用Google的Colab","date":"2021-11-12T14:34:00.000Z","updated":"2021-11-12T14:41:49.780Z","comments":true,"path":"/post/如何使用Google的Colab.html","link":"","permalink":"https://rongkangxiong.top/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Google%E7%9A%84Colab.html","excerpt":"Google Colab(Colaboratory) 是一个研究项目，可免费使用。旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行","text":"Google Colab(Colaboratory) 是一个研究项目，可免费使用。旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行","categories":[{"name":"Python","slug":"Python","permalink":"https://rongkangxiong.top/categories/Python/"},{"name":"Colab","slug":"Python/Colab","permalink":"https://rongkangxiong.top/categories/Python/Colab/"}],"tags":[{"name":"Colab","slug":"Colab","permalink":"https://rongkangxiong.top/tags/Colab/"},{"name":"机器学习","slug":"机器学习","permalink":"https://rongkangxiong.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Python","slug":"Python","permalink":"https://rongkangxiong.top/tags/Python/"},{"name":"Jupyter notebook","slug":"Jupyter-notebook","permalink":"https://rongkangxiong.top/tags/Jupyter-notebook/"}],"author":"爱养虫的小熊"},{"title":"用Pycharm跑Jupyter在远程服务器上运行","slug":"用Pycharm跑Jupyter在远程服务器上运行","date":"2021-11-12T07:44:28.000Z","updated":"2021-11-12T15:51:15.194Z","comments":true,"path":"/post/用Pycharm跑Jupyter在远程服务器上运行.html","link":"","permalink":"https://rongkangxiong.top/post/%E7%94%A8Pycharm%E8%B7%91Jupyter%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%90%E8%A1%8C.html","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"https://rongkangxiong.top/categories/Python/"},{"name":"Jupyter notebook","slug":"Python/Jupyter-notebook","permalink":"https://rongkangxiong.top/categories/Python/Jupyter-notebook/"}],"tags":[{"name":"Jupyter notebook","slug":"Jupyter-notebook","permalink":"https://rongkangxiong.top/tags/Jupyter-notebook/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://rongkangxiong.top/tags/Pycharm/"},{"name":"服务器","slug":"服务器","permalink":"https://rongkangxiong.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"author":"爱养虫的小熊"},{"title":"Linux常用命令","slug":"Linux常用命令","date":"2021-11-12T05:34:35.000Z","updated":"2021-11-12T14:24:23.472Z","comments":true,"path":"/post/Linux常用命令.html","link":"","permalink":"https://rongkangxiong.top/post/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","excerpt":"Linux进程管理清除Terminal界面clear 显示正在运行的CPU进程htop 显示正在运行的GPU进程显示正在运行的GPU进程 nvidia-smi 清理进程kill -9 PID 其中PID 是你的进程编号 文件操作统计文件夹下面文件个数长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录 ls -l 统计当前目录下文件的个数包括子目录 ls -lR","text":"Linux进程管理清除Terminal界面clear 显示正在运行的CPU进程htop 显示正在运行的GPU进程显示正在运行的GPU进程 nvidia-smi 清理进程kill -9 PID 其中PID 是你的进程编号 文件操作统计文件夹下面文件个数长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录 ls -l 统计当前目录下文件的个数包括子目录 ls -lR","categories":[{"name":"常用","slug":"常用","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/"},{"name":"Linux","slug":"常用/Linux","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://rongkangxiong.top/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"https://rongkangxiong.top/tags/%E5%91%BD%E4%BB%A4/"},{"name":"常用","slug":"常用","permalink":"https://rongkangxiong.top/tags/%E5%B8%B8%E7%94%A8/"}],"author":"爱养虫的小熊"},{"title":"Markdown常用语法","slug":"Markdown常用语法","date":"2021-11-12T05:02:59.000Z","updated":"2021-11-12T12:17:35.134Z","comments":true,"path":"/post/Markdown常用语法.html","link":"","permalink":"https://rongkangxiong.top/post/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95.html","excerpt":"Typora下载 小功能启用预览功能直接在文章中插入即可，此代码一下的需要点击 阅读更多 才能此代码下面的内容 &lt;!--more--&gt; 文章内部锚点跳转这个方式是由John Tsai给出的，分成两步： 定义一个锚(id)： &lt;span id&#x3D;&quot;jump&quot;&gt;跳转到的地方&lt;&#x2F;span&gt; 使用markdown语法： [点击跳转](#jump) 自己写的文章的跳转[名称](&#x2F;forder-to-you-file) 例子: 跳转到我的第一篇博客 [我的第一篇博客](&#x2F;post&#x2F;Firstblog.html) 跳转到我的笔记 在内部的位置是myblog/source/mynotes/math/common_dstribute.html [我的笔记](&#x2F;mynotes&#x2F;math&#x2F;common_dstribute.html) 链接跳转[名称](链接) 显示图片","text":"Typora下载 小功能启用预览功能直接在文章中插入即可，此代码一下的需要点击 阅读更多 才能此代码下面的内容 &lt;!--more--&gt; 文章内部锚点跳转这个方式是由John Tsai给出的，分成两步： 定义一个锚(id)： &lt;span id&#x3D;&quot;jump&quot;&gt;跳转到的地方&lt;&#x2F;span&gt; 使用markdown语法： [点击跳转](#jump) 自己写的文章的跳转[名称](&#x2F;forder-to-you-file) 例子: 跳转到我的第一篇博客 [我的第一篇博客](&#x2F;post&#x2F;Firstblog.html) 跳转到我的笔记 在内部的位置是myblog/source/mynotes/math/common_dstribute.html [我的笔记](&#x2F;mynotes&#x2F;math&#x2F;common_dstribute.html) 链接跳转[名称](链接) 显示图片 VSCode快捷键快速修复Windows 上是 Ctrl + .","categories":[{"name":"常用","slug":"常用","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/"},{"name":"Markdown","slug":"常用/Markdown","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://rongkangxiong.top/tags/Markdown/"}],"author":"爱养虫的小熊"},{"title":"Hexo-NexT主题添加相册","slug":"add-photo-album","date":"2021-11-11T14:09:55.000Z","updated":"2021-11-12T04:58:19.995Z","comments":true,"path":"/post/add-photo-album.html","link":"","permalink":"https://rongkangxiong.top/post/add-photo-album.html","excerpt":"相册期待实现效果对于相册，在自己 基于Hexo NexT搭建 的博客上期待实现与豆瓣相册类似的效果，具体如下 主界面 分类相册 自定义相册名 自定义封面 分类相册界面 三等分列 点击看大图 本地图片源/图床外链均可 与文章插图格式保持统一 其他 每张图片都可以有对应的文字描述 游客可以为图片添加评论 相册里面也可以插入视频","text":"相册期待实现效果对于相册，在自己 基于Hexo NexT搭建 的博客上期待实现与豆瓣相册类似的效果，具体如下 主界面 分类相册 自定义相册名 自定义封面 分类相册界面 三等分列 点击看大图 本地图片源/图床外链均可 与文章插图格式保持统一 其他 每张图片都可以有对应的文字描述 游客可以为图片添加评论 相册里面也可以插入视频 Hexo+NexT博客搭建相册功能创建相册目录 在 git bash 中输入命令 hexo new page gallery 在 hexo/sourse/gallery 目录下建立你需要的分类相册文件夹； 进入 hexo/sourse/gallery 目录，新建 img 文件夹用来存放相册封面；在每个相册文件夹中创建 img 文件夹用来存放大图，以及 img/s 文件夹用来存放缩略图。注意：img/s 文件夹可以省略不建，用文件名-s.jpg 的格式重命名缩略图即可。 图片处理原图处理将需要上传的图片放入 gallery/相册名/img 文件夹中，为了加载速度建议压缩至 1mb 以下，使用 jpg 格式保存；除了文件大小以外没有其它要求，但是为了方便后续页面编辑，建议将文件以容易辨识的方式重命名，例如日期-图片名.jpg。 ps：可以写一个python的gui来搭配使用 https://tding.top/archives/607c3b85.html","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/tags/Hexo/"},{"name":"NexT","slug":"NexT","permalink":"https://rongkangxiong.top/tags/NexT/"}],"author":"爱养虫的小熊"},{"title":"配置博客过程中的各种问题","slug":"question-blog","date":"2021-11-11T13:53:09.000Z","updated":"2021-11-11T14:10:32.278Z","comments":true,"path":"/post/question-blog.html","link":"","permalink":"https://rongkangxiong.top/post/question-blog.html","excerpt":"配置blog过程中遇到的一些问题","text":"配置blog过程中遇到的一些问题 点击标签和分类进去发现是空白这时候需要打开主题配置文件_config.yml menu: home: &#x2F; || fa fa-home #首页 about: &#x2F;about&#x2F; || fa fa-user #关于 #tags: &#x2F;tags&#x2F; || fa fa-tags #标签 #categories: &#x2F;categories&#x2F; || fa fa-th #分类 将tags和categories给注释取消，然后用 hexo new page tags 打开生成的tags文件夹下的index.md修改里面的内容添加一行`type: --- title: categories date: 2021-11-10 23:11:21 type: &quot;tags&quot; #新加的 --- 分类categories同理 --- title: categories date: 2021-11-10 23:11:21 type: &quot;categories&quot; ---","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"问题","slug":"个人博客/问题","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"问题","slug":"问题","permalink":"https://rongkangxiong.top/tags/%E9%97%AE%E9%A2%98/"}],"author":"爱养虫的小熊"},{"title":"addcount_number","slug":"addcount-number","date":"2021-11-11T12:02:48.000Z","updated":"2021-11-11T13:45:37.998Z","comments":true,"path":"/post/addcount-number.html","link":"","permalink":"https://rongkangxiong.top/post/addcount-number.html","excerpt":"Next 主题已经合并在NexT主题配置文件中找到 # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-word-counter symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false #允许排出代码块内所有内容，以便进行准确的单词计数 separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: true # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 2 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: &quot;mins.&quot; busuanzi统计NexT已经集成了busuanzi统计功能，只需要在主题配置文件_config.yml文件中将如下代码中的enable: flase改为enable: true即可 # Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi. # For more information: http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F; busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye 然后 hexo clean hexo g hexo d 输入密码部署上去可能要等待十分钟左右就可以显示了","text":"Next 主题已经合并在NexT主题配置文件中找到 # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-word-counter symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false #允许排出代码块内所有内容，以便进行准确的单词计数 separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: true # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 2 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: &quot;mins.&quot; busuanzi统计NexT已经集成了busuanzi统计功能，只需要在主题配置文件_config.yml文件中将如下代码中的enable: flase改为enable: true即可 # Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi. # For more information: http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F; busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye 然后 hexo clean hexo g hexo d 输入密码部署上去可能要等待十分钟左右就可以显示了","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"访客统计","slug":"访客统计","permalink":"https://rongkangxiong.top/tags/%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/"},{"name":"阅读统计","slug":"阅读统计","permalink":"https://rongkangxiong.top/tags/%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1/"}],"author":"爱养虫的小熊"},{"title":"如何用Markdown书写博客","slug":"writeblog","date":"2021-11-11T09:08:25.000Z","updated":"2021-11-12T14:11:18.576Z","comments":true,"path":"/post/writeblog.html","link":"","permalink":"https://rongkangxiong.top/post/writeblog.html","excerpt":"创建新文章git 中进入根目录输入 hexo new &lt;模板&gt; &lt;文章名&gt; 新建文章其中&lt;模板&gt;在source文件夹下面，默认有三个模板 post,draft,page 命令行输入 hexo new post aiticle_title 此时会在 source/_posts/ 文件夹中多了一个 aiticle_title.md 文件打开后可以看到 ---之间的内容为文章的配置内容 模板配置文件可以在/scaffolds/post.md修改post.md模板 --- title: &#123;&#123; title &#125;&#125; author: 爱养虫的小熊 date: &#123;&#123; date &#125;&#125; tags: [] categories: - [个人博客,Hexo] top: 1 feature: true mathjx: true #是否开启数学公式支持 comment: true --- 如何插入图片HEXO生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用 Vscode和Hexo在网页渲染的图片位置是不一样的试用好久才发现如下的格式两者都会显示图片 在source中新建一个images目录用于存放图片，将图片放在该目录下，示例: 例1. 如在myblog/source/images/notecover/Firstblog.png的这张图片想引用的时候VScode和网页都能看到要用如下格式 ![](images&#x2F;notecover&#x2F;..&#x2F;..&#x2F;..&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 或者 ![](images&#x2F;..&#x2F;..&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 如果使用格式以下格式 网页端看不到的格式|VScode能看到![ceshi](images&#x2F;notecover&#x2F;Firstblog.png) ![ceshi](&#x2F;source&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) VsCode看不到的格式|网页端能看到![ceshi](images&#x2F;notecover&#x2F;Firstblog.png) 网页端和VsCode都看不到的格式![ceshi](source&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) ![ceshi](&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 例2. 如在myblog/source/_post/Linux常用命令.md文件中插入myblog/source/_post/Linux常用命令/cup进程.png的这张图片想引用的时候VScode和网页都能看到要用如下格式 ![ceshi](_post&#x2F;..&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](_post&#x2F;Linux常用命令&#x2F;..&#x2F;..&#x2F;Linux常用命令&#x2F;GUP进程.png) 下面的方法只能在文章Linux常用命令.md中插入同文件夹路径下的图片Linux常用命令/tupian.png ![ceshi](Linux常用命令&#x2F;GUP进程.png) VScode能看到的格式|网页端看不到![ceshi](&#x2F;Linux常用命令&#x2F;GUP进程.png) 网页端能看到的格式|VScode看不到![ceshi](&#x2F;_post&#x2F;_Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;GUP进程.png) ![ceshi](GUP进程.png) 网页端和VScode都不能看到![ceshi](_post&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;_post&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;Linux常用命令&#x2F;GUP进程.png) 如何插入链接格式: [](链接)","text":"创建新文章git 中进入根目录输入 hexo new &lt;模板&gt; &lt;文章名&gt; 新建文章其中&lt;模板&gt;在source文件夹下面，默认有三个模板 post,draft,page 命令行输入 hexo new post aiticle_title 此时会在 source/_posts/ 文件夹中多了一个 aiticle_title.md 文件打开后可以看到 ---之间的内容为文章的配置内容 模板配置文件可以在/scaffolds/post.md修改post.md模板 --- title: &#123;&#123; title &#125;&#125; author: 爱养虫的小熊 date: &#123;&#123; date &#125;&#125; tags: [] categories: - [个人博客,Hexo] top: 1 feature: true mathjx: true #是否开启数学公式支持 comment: true --- 如何插入图片HEXO生成静态界面时，同一篇文章会在多处页面生成，例如首页、文章详情页等，而不同页面与图片的相对位置是不一样的，而该方式hexo不会自动处理图片引用 Vscode和Hexo在网页渲染的图片位置是不一样的试用好久才发现如下的格式两者都会显示图片 在source中新建一个images目录用于存放图片，将图片放在该目录下，示例: 例1. 如在myblog/source/images/notecover/Firstblog.png的这张图片想引用的时候VScode和网页都能看到要用如下格式 ![](images&#x2F;notecover&#x2F;..&#x2F;..&#x2F;..&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 或者 ![](images&#x2F;..&#x2F;..&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 如果使用格式以下格式 网页端看不到的格式|VScode能看到![ceshi](images&#x2F;notecover&#x2F;Firstblog.png) ![ceshi](&#x2F;source&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) VsCode看不到的格式|网页端能看到![ceshi](images&#x2F;notecover&#x2F;Firstblog.png) 网页端和VsCode都看不到的格式![ceshi](source&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) ![ceshi](&#x2F;images&#x2F;notecover&#x2F;Firstblog.png) 例2. 如在myblog/source/_post/Linux常用命令.md文件中插入myblog/source/_post/Linux常用命令/cup进程.png的这张图片想引用的时候VScode和网页都能看到要用如下格式 ![ceshi](_post&#x2F;..&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](_post&#x2F;Linux常用命令&#x2F;..&#x2F;..&#x2F;Linux常用命令&#x2F;GUP进程.png) 下面的方法只能在文章Linux常用命令.md中插入同文件夹路径下的图片Linux常用命令/tupian.png ![ceshi](Linux常用命令&#x2F;GUP进程.png) VScode能看到的格式|网页端看不到![ceshi](&#x2F;Linux常用命令&#x2F;GUP进程.png) 网页端能看到的格式|VScode看不到![ceshi](&#x2F;_post&#x2F;_Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;GUP进程.png) ![ceshi](GUP进程.png) 网页端和VScode都不能看到![ceshi](_post&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;_post&#x2F;Linux常用命令&#x2F;GUP进程.png) ![ceshi](&#x2F;Linux常用命令&#x2F;GUP进程.png) 如何插入链接格式: [](链接) hexo-admin插件管理博客写作每次新建文章和写作文章都在git命令行中，很不方便，于是可以安装这款插件参考hexo-admin官方页面 npm install --save hexo-admin hexo g hexo s open &lt;http:&#x2F;&#x2F;localhost:4000&#x2F;admin&#x2F;&gt; 然后浏览器输入http://localhost:4000/admin/进入管理界面setting 我的笔记 复制下面生成的 Admin Config Section内容到 /blog/_config.yml粘贴在最后即可之后登陆需要输入账户密码 在Deploy之前，还要编辑网站配置文件_config.yml （否则会出现Error: Config value &quot;admin.deployCommand&quot; not found)报错如果实在Windows系统，这在末尾加上 deployCommand:&#39;hexo-generate.bat&#39;","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"个人博客/Hexo","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"author":"爱养虫的小熊"},{"title":"Hexo的Next主题配置Utterances评论系统","slug":"addcomment","date":"2021-11-11T08:41:00.000Z","updated":"2021-11-12T14:38:24.354Z","comments":true,"path":"/post/addcomment.html","link":"","permalink":"https://rongkangxiong.top/post/addcomment.html","excerpt":"","text":"写作前面最新版本的NexT默认不内置gitment评论系统选用目前NexT 8+版本的内置Utterances 创建GitHub仓库在自己的github账号下创建一个仓库来存放评论，仓库名最好为utterances，方便后续自己识别，仓库设置为public设置一个readme文件 安装Utterances安装地址：https://github.com/apps/utterances访问安装地址，进入安装页面，点击Install按钮权限选择，可以选择访问全部仓库，或者刚才指定仓库 配置Utterances打开/blog/themes/next/_config.yml查找utterances字段并修改如下 # Utterances # For more information: https:&#x2F;&#x2F;utteranc.es utterances: enable: true repo: SantaJiang&#x2F;utterances #格式是 user_name&#x2F;repo_name # Available values: pathname | url | title | og:title issue_term: pathname # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light theme: github-light 完成后重新部署: hexo clean hexo g hexo d 一个一个运行，不然可能部署会报错 参考链接: utterance Santa的个人博客","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"NexT","slug":"NexT","permalink":"https://rongkangxiong.top/tags/NexT/"},{"name":"评论系统","slug":"评论系统","permalink":"https://rongkangxiong.top/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"}]},{"title":"Next配置","slug":"config-next","date":"2021-11-11T03:14:00.000Z","updated":"2021-11-11T08:23:04.582Z","comments":true,"path":"/post/config-next.html","link":"","permalink":"https://rongkangxiong.top/post/config-next.html","excerpt":"写在开头点击跳转到文末 Hexo搭建的GitHub博客之优化大全https://zhuanlan.zhihu.com/p/33616481背景动画 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 打开站点配置文件_config.yml，搜索post_asset_folder字段，设置其值为true 安装hexo-asset-image：npm install hexo-asset-image –save 此时hexo new “fileName”会在/source/_posts目录下创建同名的文件夹 只需在 md 文件里使用 ![title](图片名.jpg) 无需路径名就可以插入图片。ps: 发现这样就不能启用创建文件自动打开编辑器功能自己创建文件夹即可","text":"写在开头点击跳转到文末 Hexo搭建的GitHub博客之优化大全https://zhuanlan.zhihu.com/p/33616481背景动画 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 打开站点配置文件_config.yml，搜索post_asset_folder字段，设置其值为true 安装hexo-asset-image：npm install hexo-asset-image –save 此时hexo new “fileName”会在/source/_posts目录下创建同名的文件夹 只需在 md 文件里使用 ![title](图片名.jpg) 无需路径名就可以插入图片。ps: 发现这样就不能启用创建文件自动打开编辑器功能自己创建文件夹即可 启用预览功能直接在文章中插入即可，此代码一下的需要点击 阅读更多 才能显示 &lt;!--more--&gt; 文章内部锚点跳转这个方式是由John Tsai给出的，分成两步： 定义一个锚(id)： &lt;span id&#x3D;&quot;jump&quot;&gt;跳转到的地方&lt;&#x2F;span&gt; 使用markdown语法： [点击跳转](#jump) 自己写的文章的跳转[名称](&#x2F;forder-to-you-file) 在 /mynotes/math 下的 common_dstribute.md文件可以通过一下代码实现跳转常用概率分布 mynotes 在 /mynotes/ 下的 index.md文件可以通过跳转 [mynotes](&#x2F;mynotes&#x2F;index.html) Introduction在/source/_post/ 文件夹下面(和本文件同文件夹)的introduction.md的文件可以通过来跳转 [Introduction](introduction.html) 站点文章置顶打开Myblog站点下node_modules/hexo-generator-index/lib/generator.js文件。代码全部替换为 &#39;use strict&#39;; var pagination &#x3D; require(&#39;hexo-pagination&#39;); module.exports &#x3D; function(locals)&#123; var config &#x3D; this.config; var posts &#x3D; locals.posts; posts.data &#x3D; posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; &#x2F;&#x2F; 两篇文章top都有定义 if(a.top &#x3D;&#x3D; b.top) return b.date - a.date; &#x2F;&#x2F; 若top值一样则按照文章日期降序排 else return b.top - a.top; &#x2F;&#x2F; 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; &#x2F;&#x2F; 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; &#x2F;&#x2F; 都没定义按照文章日期降序排 &#125;); var paginationDir &#x3D; config.pagination_dir || &#39;page&#39;; return pagination(&#39;&#39;, posts, &#123; perPage: config.index_generator.per_page, layout: [&#39;index&#39;, &#39;archive&#39;], format: paginationDir + &#39;&#x2F;%d&#x2F;&#39;, data: &#123; __index: true &#125; &#125;); &#125;; 打开文章添加top字段,设置数值，数值越大文章越靠前 --- layout: layout title: 标签1 date: 2017-08-18 15:41:18 tags: 标签1 top: 100 --- 参考链接https://www.jianshu.com/p/d23d67d318c7 Hexo博客NexT主题下添加字数统计和阅读时长 安装hexo-symbols-count-time npm install hexo-symbols-count-time --save 如果安装完报如下提醒，还需安装eslint npm install eslint --save 站点/_config.yml配置 symbols_count_time: symbols: true # 文章字数统计 time: true # 文章阅读时长 total_symbols: true # 站点总字数统计 total_time: true # 站点总阅读时长 exclude_codeblock: false # 排除代码字数统计 Next主题文件 themes/next/_config.yml # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time symbols_count_time: separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: false # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 4 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: mins. 参考链接https://github.com/RongkangXiong/hexo-symbols-count-time Hexo博客NexT主题下代码块复制功能为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo NexT主题博客的代码块复制功能配置。 在themes/next/layout/_third-party/下新建文件copy-code.swig，写入下面的内容： &#123;% if theme.codeblock.copy_button.enable %&#125; &lt;style&gt; .copy-btn &#123; display: inline-block; padding: 6px 12px; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; white-space: nowrap; vertical-align: middle; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; user-select: none; outline: 0; &#125; .highlight-wrap .copy-btn &#123; transition: opacity .3s ease-in-out; opacity: 0; padding: 2px 6px; position: absolute; right: 4px; top: 8px; &#125; .highlight-wrap:hover .copy-btn, .highlight-wrap .copy-btn:focus &#123; opacity: 1 &#125; .highlight-wrap &#123; position: relative; &#125; &lt;&#x2F;style&gt; &lt;script&gt; $(&#39;.highlight&#39;).each(function (i, e) &#123; var $wrap &#x3D; $(&#39;&lt;div&gt;&#39;).addClass(&#39;highlight-wrap&#39;) $(e).after($wrap) $wrap.append($(&#39;&lt;button&gt;&#39;).addClass(&#39;copy-btn&#39;).append(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;).on(&#39;click&#39;, function (e) &#123; var code &#x3D; $(this).parent().find(&#39;.code&#39;).find(&#39;.line&#39;).map(function (i, e) &#123; return $(e).text() &#125;).toArray().join(&#39;\\n&#39;) var ta &#x3D; document.createElement(&#39;textarea&#39;) document.body.appendChild(ta) ta.style.position &#x3D; &#39;absolute&#39; ta.style.top &#x3D; &#39;0px&#39; ta.style.left &#x3D; &#39;0px&#39; ta.value &#x3D; code ta.select() ta.focus() var result &#x3D; document.execCommand(&#39;copy&#39;) document.body.removeChild(ta) &#123;% if theme.codeblock.copy_button.show_result %&#125; if(result)$(this).text(&#39;&#123;&#123;__(&quot;post.copy_success&quot;)&#125;&#125;&#39;) else $(this).text(&#39;&#123;&#123;__(&quot;post.copy_failure&quot;)&#125;&#125;&#39;) &#123;% endif %&#125; $(this).blur() &#125;)).on(&#39;mouseleave&#39;, function (e) &#123; var $b &#x3D; $(this).find(&#39;.copy-btn&#39;) setTimeout(function () &#123; $b.text(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;) &#125;, 300) &#125;).append(e) &#125;) &lt;&#x2F;script&gt; &#123;% endif %&#125; 编辑themes/next/layout/_layout.njk文件，在文件末尾 &#123;&#123;- next_inject(&#39;bodyEnd&#39;) &#125;&#125; 前面对齐添加一行代码： &#123;% include &#39;_third-party&#x2F;copy-code.swig&#39; -%&#125; 添加按钮上显示的语言 在themes/next/languages/zh-CN.yml文件的post板块中添加下列代码： copy_button: 复制 copy_success: 复制成功 copy_failure: 复制失败 在主题配置文件themes/next/_config.yml中添加开关搜索codeblock codeblock: border_radius: copy_button: enable: true # Show text copy result show_result: true 重新生成 hexo clean &amp; hexo g 参考链接https://blog.csdn.net/Awt_FuDongLai/article/details/107466848 添加搜索功能 安装插件 npm install hexo-generator-search 查找主题配置文件themes/next/_config.yml中的local_search ： local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: manual #手动，按回车键或搜索按钮触发搜索 # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false Hexo添加文章时自动打开编辑器 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件(name.js) 如果没有这个scripts目录，则新建一个scripts目录 新建的JavaScript脚本文件可以任意取名通过这个脚本，我们用其来监听hexo new这个动作，并在检测到hexo new之后，执行编辑器打开的命令 如果你是windows平台的Hexo用户，则将下列内容写入你的脚本： var spawn &#x3D; require(&#39;child_process&#39;).exec; hexo.on(&#39;new&#39;, function(data)&#123; spawn(&#39;start &quot;markdown编辑器绝对路径.exe&quot; &#39; + data.path); &#125;); 如果你是Mac平台Hexo用户，则将下列内容写入你的脚本： var exec &#x3D; require(&#39;child_process&#39;).exec; hexo.on(&#39;new&#39;, function(data)&#123; exec(&#39;open -a &quot;markdown编辑器绝对路径.app&quot; &#39; + data.path); &#125;); 参考链接https://blog.csdn.net/weixin_39345384/article/details/80785373 多台电脑Hexo写作Blog同步新建一个分支。通过在GitHub上新建一个分支，来保存本地的原始文件，另一个分支来保存hexo生成的静态网页。这里详细介绍以下步骤。 在原始电脑上新建一个分支hexo，设置为默认分支，保存本地原始文件在 点击侧栏头像回到首页文末 点击跳转到开头","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/categories/Hexo/"},{"name":"NexT","slug":"Hexo/NexT","permalink":"https://rongkangxiong.top/categories/Hexo/NexT/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://rongkangxiong.top/tags/next/"}]},{"title":"newmenu","slug":"newmenu","date":"2021-11-10T17:58:21.000Z","updated":"2021-11-11T13:46:06.663Z","comments":true,"path":"/post/newmenu.html","link":"","permalink":"https://rongkangxiong.top/post/newmenu.html","excerpt":"","text":"为Hexo的Next主题增加自定义menu菜单现在Hexo使用的主题当中，Next主题是比较流行的，查看Next主题的_config.yml，其中有8个默认定义的menu菜单，分别是home、about、tags、categories、archives、schedule、sitemap、commonweal 。通过参考tags、categories两个菜单，可以实现菜单的定制化。 menu: home: &#x2F; || fa fa-home #首页 about: &#x2F;about&#x2F; || fa fa-user #关于 tags: &#x2F;tags&#x2F; || fa fa-tags #标签 categories: &#x2F;categories&#x2F; || fa fa-th #分类 read: &#x2F;categories&#x2F;read || fa fa-book #读书 archives: &#x2F;archives&#x2F; || fa fa-archive #归档 mynotes: &#x2F;mynotes&#x2F; || fa fa-sticky-note #我的笔记 #schedule: &#x2F;schedule&#x2F; || fa fa-calendar #日历 sitemap: &#x2F;sitemap.xml || fa fa-sitemap #站点地图，供搜索引擎爬取 #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat #腾讯公益404 # &quot;||&quot; 前面是目标链接，后面是图标名称，图标库http:&#x2F;&#x2F;www.fontawesome.com.cn&#x2F;faicons&#x2F;#web-application","categories":[],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"菜单","slug":"菜单","permalink":"https://rongkangxiong.top/tags/%E8%8F%9C%E5%8D%95/"}]},{"title":"个人博客图床资源获取","slug":"materialsite","date":"2021-11-10T04:31:49.000Z","updated":"2021-11-10T05:19:31.911Z","comments":true,"path":"/post/materialsite.html","link":"","permalink":"https://rongkangxiong.top/post/materialsite.html","excerpt":"","text":"图床","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"资源","slug":"资源","permalink":"https://rongkangxiong.top/tags/%E8%B5%84%E6%BA%90/"},{"name":"图片","slug":"图片","permalink":"https://rongkangxiong.top/tags/%E5%9B%BE%E7%89%87/"}]},{"title":"Introduction","slug":"introduction","date":"2021-11-10T03:14:00.000Z","updated":"2021-11-12T14:26:04.787Z","comments":true,"path":"/post/introduction.html","link":"","permalink":"https://rongkangxiong.top/post/introduction.html","excerpt":"","text":"相遇即是缘分博客初建，入站须知 欢迎来到我的世界，这是我的个人博客 知识总结，技术分享 本博客是基于Hexo框架搭建，采用Hexo-theme-next主题并加以改进 后期也会不定时增加新的功能 欢迎留言评论~ 敬请期待！！！","categories":[{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/categories/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"}],"tags":[{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/tags/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"}]},{"title":"First Blog-制作个人博客","slug":"Firstblog","date":"2021-11-09T15:02:32.000Z","updated":"2021-11-11T09:25:28.386Z","comments":true,"path":"/post/Firstblog.html","link":"","permalink":"https://rongkangxiong.top/post/Firstblog.html","excerpt":"自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 HEXO搭建步骤 安装git 安装Node.js，选择LTS版本就行 安装Hexo Github建立个人仓库 生成SSH添加到GitHub 将Hexo部署到GitHub 设置个人域名 发布文章","text":"自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 HEXO搭建步骤 安装git 安装Node.js，选择LTS版本就行 安装Hexo Github建立个人仓库 生成SSH添加到GitHub 将Hexo部署到GitHub 设置个人域名 发布文章 安装hexoWindows检查安装是否成功node -v npm -v 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下(或者在这个文件夹下直接右键git bash打开) 开始安装Hexo输入命令 npm install -g hexo-cli 你会发现出现 changed 57 packages in 6s 1 package is looking for funding run &#96;npm fund&#96; for details 这不是报错，只是开发者寻求捐赠支持翻译：1个包正在寻找资金，运行 npm fund了解详细信息 初始化Hexohexo init myblog 当下载很慢的时候可以更换源 淘宝npm镜像 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com 阿里源 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org npm config list 输入代码检查换源是否成功过 npm config list 然后 cd myblog &#x2F;&#x2F;进入这个myblog文件夹 npm install hexo g 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public: 存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 继续输入 hexo g hexo server 打开hexo的服务，在浏览器输入localhost:4000就可以在本地看到你生成的博客 修改配置文件 _config.ymldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io.git branch: main 注意空格还有对齐 安装deploy-git也就是部署的命令,这样你才能用命令部署到GitHub npm install hexo-deployer-git --save 然后确认是否连接成功 ssh -T git@github.com 会出现让你确认密码 hexo clean hexo generate hexo deploy 其中hexo clean清除了你之前生成的东西，也可以不加。hexo generate 顾名思义，生成静态文章，可以用hexo g缩写hexo deploy 部署文章，可以用hexo d缩写 出现一下信息表示部署成功 Branch &#39;master&#39; set up to track remote branch &#39;main&#39; from &#39;https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io&#39;. INFO Deploy done: git 过一会儿就可以在 http://yourname.github.io 这个网站看到你的博客了 问题出现 OpenSSL SSL_read: Connection was reset, errno 10054 git config --global http.sslVerify &quot;false&quot; &#96;&#96;&#96;自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。 直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 # Hexo简介 Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 # HEXO搭建步骤 1. 安装[git](https:&#x2F;&#x2F;git-scm.com&#x2F;download&#x2F;win) 2. 安装[Node.js](https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;)，选择LTS版本就行 3. 安装Hexo 4. Github建立个人仓库 5. 生成SSH添加到GitHub 6. 将Hexo部署到GitHub 7. 设置个人域名 8. 发布文章 # 安装hexo ### Windows检查安装是否成功 &#96;&#96;&#96;git node -v npm -v 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下(或者在这个文件夹下直接右键git bash打开) 开始安装Hexo输入命令 npm install -g hexo-cli 你会发现出现 changed 57 packages in 6s 1 package is looking for funding run &#96;npm fund&#96; for details 这不是报错，只是开发者寻求捐赠支持翻译：1个包正在寻找资金，运行 npm fund了解详细信息 初始化Hexohexo init myblog 当下载很慢的时候可以更换源 淘宝npm镜像 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com 阿里源 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org npm config list 输入代码检查换源是否成功过 npm config list 然后 cd myblog &#x2F;&#x2F;进入这个myblog文件夹 npm install hexo g 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public: 存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 继续输入 hexo g hexo server 打开hexo的服务，在浏览器输入localhost:4000就可以在本地看到你生成的博客 修改配置文件 _config.ymldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io.git branch: main 这里 repo内容可以换为： git@github.com:RongkangXiong&#x2F;RongkangXiong.github.io.git 从而避免每次都要输入密码 注意空格还有对齐 安装deploy-git也就是部署的命令,这样你才能用命令部署到GitHub npm install hexo-deployer-git --save 然后确认是否连接成功 ssh -T git@github.com 会出现让你确认密码 hexo clean hexo generate hexo deploy 其中hexo clean清除了你之前生成的东西，也可以不加。hexo generate 顾名思义，生成静态文章，可以用hexo g缩写hexo deploy 部署文章，可以用hexo d缩写 快速代码为: hexo clean &amp; hexo g &amp; hexo d 出现一下信息表示部署成功 Branch &#39;master&#39; set up to track remote branch &#39;main&#39; from &#39;https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io&#39;. INFO Deploy done: git 过一会儿就可以在 http://yourname.github.io 这个网站看到你的博客了 hexo基本配置在文件根目录下的 _config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 网站| 参数 | 描述 | 作用| - | :-: | -: | -: || title | 网站标题 | ||subtitle|网站副标题| ||description| 网站描述| 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词 ||author |您的名字| 显示文章的作者 ||language |网站使用的语言| ||timezone |网站时区Hexo，比如说：America/New_York, Japan和 UTC| 默认使用您电脑的时区 | 网址| 参数 | 描述 | 操作 || - | :-: | :-: | :-: ||url|网址| url改成你的网站域名||root|网站根目录| ||permalink |文章的 永久链接 格式| 生成某个文章时候的链接格式，官方给出的永久链接变量很多 ||permalink_defaults |永久链接中各部分的默认值| 运行Hexo服务器在127.0.0.1::8080 上启动服务器 hexo server -i 127.0.0.1 -p 8080 问题出现 OpenSSL SSL_read: Connection was reset, errno 10054git config --global http.sslVerify &quot;false&quot; 更换主题觉得默认的landscape主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦 Hexo主题安装教程进入官网的主题，选择喜欢主题，点击链接进入github界面然后复制 Code 的 HTTPS 或者 Github CLI链接 git clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-hueman.git themes&#x2F;hueman 如果下载不了可以下载zip解压到 themes/hueman 下面也可以用GitHub桌面端进行Clone 安装搜索系统安装评论系统npm install valine --save 参考链接： Hexo 更换主题 hexo史上最全搭建教程 aurora主题 魔改aurora主题 vuepress-theme-aurora主题","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/tags/Hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"网站","slug":"网站","permalink":"https://rongkangxiong.top/tags/%E7%BD%91%E7%AB%99/"},{"name":"Github","slug":"Github","permalink":"https://rongkangxiong.top/tags/Github/"}]},{"title":"如何制作输出电子笔记","slug":"HowtoWriteNotes","date":"2021-11-09T15:02:32.000Z","updated":"2021-11-10T03:56:28.380Z","comments":true,"path":"/post/HowtoWriteNotes.html","link":"","permalink":"https://rongkangxiong.top/post/HowtoWriteNotes.html","excerpt":"","text":"How to Write MyNotes通过 plantuml绘制流程图 支持类型MindMap diagramSequence diagramUsecase diagramClass diagram 插入代码Python代码删去&#96; &#96; &#96;之间的空格 &#96; &#96; &#96;python def helloworld(): print(&quot;helloworld&quot;) &#96; &#96; &#96; 得到效果 def helloworld(): print(&quot;hello world&quot;)","categories":[{"name":"个人博客制作","slug":"个人博客制作","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"笔记","slug":"笔记","permalink":"https://rongkangxiong.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Notes","slug":"Notes","permalink":"https://rongkangxiong.top/tags/Notes/"}]}],"categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Python","slug":"Python","permalink":"https://rongkangxiong.top/categories/Python/"},{"name":"Colab","slug":"Python/Colab","permalink":"https://rongkangxiong.top/categories/Python/Colab/"},{"name":"Jupyter notebook","slug":"Python/Jupyter-notebook","permalink":"https://rongkangxiong.top/categories/Python/Jupyter-notebook/"},{"name":"常用","slug":"常用","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/"},{"name":"Linux","slug":"常用/Linux","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/Linux/"},{"name":"Markdown","slug":"常用/Markdown","permalink":"https://rongkangxiong.top/categories/%E5%B8%B8%E7%94%A8/Markdown/"},{"name":"问题","slug":"个人博客/问题","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%97%AE%E9%A2%98/"},{"name":"Hexo","slug":"个人博客/Hexo","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Hexo/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/categories/Hexo/"},{"name":"NexT","slug":"Hexo/NexT","permalink":"https://rongkangxiong.top/categories/Hexo/NexT/"},{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/categories/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"},{"name":"个人博客制作","slug":"个人博客制作","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"Colab","slug":"Colab","permalink":"https://rongkangxiong.top/tags/Colab/"},{"name":"机器学习","slug":"机器学习","permalink":"https://rongkangxiong.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Python","slug":"Python","permalink":"https://rongkangxiong.top/tags/Python/"},{"name":"Jupyter notebook","slug":"Jupyter-notebook","permalink":"https://rongkangxiong.top/tags/Jupyter-notebook/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://rongkangxiong.top/tags/Pycharm/"},{"name":"服务器","slug":"服务器","permalink":"https://rongkangxiong.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Linux","slug":"Linux","permalink":"https://rongkangxiong.top/tags/Linux/"},{"name":"命令","slug":"命令","permalink":"https://rongkangxiong.top/tags/%E5%91%BD%E4%BB%A4/"},{"name":"常用","slug":"常用","permalink":"https://rongkangxiong.top/tags/%E5%B8%B8%E7%94%A8/"},{"name":"Markdown","slug":"Markdown","permalink":"https://rongkangxiong.top/tags/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/tags/Hexo/"},{"name":"NexT","slug":"NexT","permalink":"https://rongkangxiong.top/tags/NexT/"},{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"问题","slug":"问题","permalink":"https://rongkangxiong.top/tags/%E9%97%AE%E9%A2%98/"},{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"访客统计","slug":"访客统计","permalink":"https://rongkangxiong.top/tags/%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/"},{"name":"阅读统计","slug":"阅读统计","permalink":"https://rongkangxiong.top/tags/%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1/"},{"name":"评论系统","slug":"评论系统","permalink":"https://rongkangxiong.top/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"next","slug":"next","permalink":"https://rongkangxiong.top/tags/next/"},{"name":"菜单","slug":"菜单","permalink":"https://rongkangxiong.top/tags/%E8%8F%9C%E5%8D%95/"},{"name":"资源","slug":"资源","permalink":"https://rongkangxiong.top/tags/%E8%B5%84%E6%BA%90/"},{"name":"图片","slug":"图片","permalink":"https://rongkangxiong.top/tags/%E5%9B%BE%E7%89%87/"},{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/tags/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"},{"name":"网站","slug":"网站","permalink":"https://rongkangxiong.top/tags/%E7%BD%91%E7%AB%99/"},{"name":"Github","slug":"Github","permalink":"https://rongkangxiong.top/tags/Github/"},{"name":"笔记","slug":"笔记","permalink":"https://rongkangxiong.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Notes","slug":"Notes","permalink":"https://rongkangxiong.top/tags/Notes/"}]}