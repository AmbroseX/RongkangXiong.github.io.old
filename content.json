{"meta":{"title":"Rongkang's Blog","subtitle":"","description":"个人博客 | 爱养虫的小熊","author":"Rongkang Xiong","url":"https://rongkangxiong.top","root":"/"},"pages":[{"title":"关于","date":"2021-11-09T16:06:53.000Z","updated":"2021-11-10T15:03:09.481Z","comments":false,"path":"about/index.html","permalink":"https://rongkangxiong.top/about/index.html","excerpt":"","text":"关于我"},{"title":"课程","date":"2021-11-10T03:37:16.000Z","updated":"2021-11-10T15:05:14.496Z","comments":false,"path":"course/index.html","permalink":"https://rongkangxiong.top/course/index.html","excerpt":"","text":"大一课程大二课程大三课程大四课程研一课程研二课程"},{"title":"categories","date":"2021-11-10T15:11:21.000Z","updated":"2021-11-10T15:11:21.360Z","comments":true,"path":"categories/index.html","permalink":"https://rongkangxiong.top/categories/index.html","excerpt":"","text":""},{"title":"我的笔记","date":"2021-11-09T16:07:29.000Z","updated":"2021-11-10T15:07:32.767Z","comments":false,"path":"mynotes/index.html","permalink":"https://rongkangxiong.top/mynotes/index.html","excerpt":"","text":""},{"title":"read","date":"2021-11-10T18:04:50.000Z","updated":"2021-11-10T18:04:50.226Z","comments":true,"path":"read/index.html","permalink":"https://rongkangxiong.top/read/index.html","excerpt":"","text":""},{"title":"导航","date":"2021-11-10T02:14:35.000Z","updated":"2021-11-10T15:14:39.147Z","comments":true,"path":"guide/index.html","permalink":"https://rongkangxiong.top/guide/index.html","excerpt":"","text":""},{"title":"资源","date":"2021-11-10T04:31:28.000Z","updated":"2021-11-10T15:12:58.294Z","comments":true,"path":"resources/index.html","permalink":"https://rongkangxiong.top/resources/index.html","excerpt":"","text":"各种软件资源各种编程资源"},{"title":"tags","date":"2021-11-10T15:11:30.000Z","updated":"2021-11-10T15:11:30.575Z","comments":true,"path":"tags/index.html","permalink":"https://rongkangxiong.top/tags/index.html","excerpt":"","text":""},{"title":"thinking","date":"2021-11-09T16:27:07.000Z","updated":"2021-11-09T16:27:07.608Z","comments":true,"path":"thinking/index.html","permalink":"https://rongkangxiong.top/thinking/index.html","excerpt":"","text":""},{"title":"R语言常用代码","date":"2021-11-10T03:14:00.000Z","updated":"2021-11-10T11:09:25.798Z","comments":true,"path":"mynotes/Rcode/Rquery.html","permalink":"https://rongkangxiong.top/mynotes/Rcode/Rquery.html","excerpt":"","text":"tabel输出library(knitr) result &lt;- cbind(theta.hat, boot.theta.hat, bias,standard.error) #合并计算结果 dimnames(result)[[2]] &lt;- c(&quot;theta&quot;, &quot;Bootstrap theta.hat&quot;, &quot;bias&quot;, &quot;standard error&quot;) #重命名各列 kable(result, caption &#x3D; &quot;表1：用bootstrap估计theta.hat的bias和standard error&quot;) 表1.1：用bootstrap估计theta.hat的bias和standard error|theta| Bootstrap | theta.hat | bias standard error || - | :-: | -: | -: ||0.619115| 0.6199636| 0.0008486| 0.0477611|"},{"title":"常见分布","date":"2021-11-11T03:14:00.000Z","updated":"2021-11-10T19:08:01.911Z","comments":true,"path":"mynotes/math/common_dstribute.html","permalink":"https://rongkangxiong.top/mynotes/math/common_dstribute.html","excerpt":"","text":"基本概念随机变量X的熵$$离散形式 \\quad H(x) =-E^X[ln(p_i)]= - \\sum_i p_i ln(p_i) , \\quad 规定 0\\cdot ln 0 =0 \\连续形式 \\quad H(x) =-E^X[ln(f(x))]= - \\int f(x) ln(f(x)) dx$$ ### 先验分布的熵$$先验参数: \\quad \\theta \\sim \\pi(\\theta) \\离散值: E_n(\\pi) = -E^\\theta[ln(p_i)] =-\\sum_i p_i ln(p_i) \\ 连续值:E_n(\\pi) = -E^\\theta[ln(p_i)] =- \\int\\pi(\\theta) ln(\\pi(\\theta))d\\theta$$ K-L距离即K-L散度,一种量化两种概率分布P和Q之间差异的方式,又叫相对熵能帮助我们度量使用一个分布来近似另一个分布时所损失的信息 定义 $$ \\begin{align} 离散形式 \\quad D(P||Q) &amp;=E^{P}[lnP(x)-lnQ(x)] \\ &amp; =\\sum_&#123;i=1&#125;^&#123;n&#125; P(x) ln \\frac&#123;P(x)&#125;&#123;Q(x)&#125; \\\\ 连续形式 \\quad D(P||Q) &amp;=E^{P}[lnP(x)-lnQ(x)] \\ &amp; = \\int P(x) ln \\frac&#123;P(x)&#125;&#123;Q(x)&#125; dx \\end{align} $$ 即数据的原始分布p和近似分布q之间的对数差值的期望 如果继续用2为底的对数计算，则K-L散度值表示信息损失的二进制位数 相对熵的性质 &lt;!-- --&gt; (1) 尽管KL散度从直观上是个度量或距离函数,但它并不是一个真正的度量或者距离,因为它不具有对称性,即$$D(P||Q) \\neq D(Q||P)$$ (2) 相对熵的值为非负值,即$$D(P||Q)≥0$$ 位置参数和刻度参数fisher信息阵求解设样本分布族 ${f(x| \\theta),\\theta \\in \\Theta }$满足C-R正则条件,这里$\\theta=(\\theta_1,…,\\theta_p)$为p维参数向量.设$X=(X_1,…,X_n)$是从总体$f(x|\\theta)$抽样的i.i.d.样本.当$\\theta$无先验信息可用时,Jeffrey是用Fisher信息阵行列式的平方根作为$\\theta$的无信息先验 写出参数$\\theta$的对数似然函数 $$ \\begin{align} l(\\theta|x) = ln(\\prod_{i=1}^{n} f(x_i|\\theta)) = \\sum_{i=1}^{n} ln f(x_i|\\theta) \\end{align} $$ 求fisher信息矩阵 $$\\begin{align}&amp;I(\\theta) = (I_{ij}(\\theta)){p\\times p}, \\quad I{ij}(\\theta)=E^{X|\\theta} (-\\frac{\\partial^2 l}{\\partial\\theta_i \\partial \\theta_j}) , \\quad (i,j=1,…,p) \\&amp;特别的对于单参数情形 \\&amp; I(\\theta) = E^{X|\\theta} (-\\frac{\\partial^2 l}{\\partial\\theta^2})\\end{align}$$ Jeffreys无信息先验参数是1维情形下,Jeffreys被证明是相当成功的多参数不相关时使用Jeffreys时效果较好Bernardo(1979)找到了在多维场合修改的Jeffreys先验方法,即Reference先验 求$\\theta$的Jeffreys无信息先验密度 $$ \\begin{align} \\pi(\\theta) = [det I(\\theta)]^{1/2} \\end{align} $$ 最大熵先验先验均值被指定,寻找信息量最少的先验分布，即最大化熵的先验分布熵和K-L距离定义密切相关,因此可以看成带有约束的Reference先验 离散参数$\\theta$最大熵先验定理$\\theta$ 为离散型随机变量, 取值为 $\\theta_{1}, \\theta_{2}, \\cdots$(至多可列个值), $\\theta$ 的先验分布满足 $$E^{\\pi}\\left[g_{k}(\\theta)\\right]=\\sum_{i} g_{k}\\left(\\theta_{i}\\right) \\pi\\left(\\theta_{i}\\right)=\\mu_{k} \\quad(k=1, \\cdots, m) \\text {, } \\tag{1}$$ 其中 $g_{k}(\\cdot), \\mu_{k}(k=1, \\cdots, m)$分别表示已知的函数和已知的常数 (当然, 此时还隐含条件$\\left.\\sum_{i} \\pi\\left(\\theta_{i}\\right)=1\\right)$, 则满足条件上式且使$E_{n}(\\pi)$ 最大化的解为 $$\\bar{\\pi}\\left(\\theta_{i}\\right)=\\frac{\\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}\\left(\\theta_{i}\\right)\\right}}{\\sum_{i} \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}\\left(\\theta_{i}\\right)\\right}} \\quad(i=1,2, \\cdots) \\tag{2}$$ 其中 $\\lambda_{1}, \\cdots, \\lambda_{m}$ 使得当 $\\pi=\\bar{\\pi}$时(1)式成立, 即 $$\\sum_{i} g_{k}\\left(\\theta_{i}\\right) \\bar{\\pi}\\left(\\theta_{i}\\right)=\\mu_{k} \\quad(k=1, \\cdots, m) \\tag{3}$$ 都成立.上述结果的推导超出本教材的范围,其证明可在很多变分法的书中找到,如(Calculus of Variations withApplications M. Ewing) 连续参数$\\theta$最大熵先验定理设 $\\theta$ 为 $\\Theta=(-\\infty, \\infty)$ 上的连续型随机变量, $\\theta$的先验分布 $\\pi(\\theta)$ 满足 $$E^{\\pi}\\left[g_{k}(\\theta)\\right]=\\int_{\\Theta} g_{k}(\\theta) \\pi(\\theta) \\mathrm{d} \\theta=\\mu_{k} \\quad(k=1, \\cdots, m)$$ 其中 $g_{k}(\\cdot), \\mu_{k}(k=1, \\cdots, m)$分别表示已知的函数和已知的常数, 则满足条件 (2.6.5) 且 使 $E_{n}(\\pi)$最大化的解为 $$\\tilde{\\pi}(\\theta)=\\frac{\\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right}}{\\int_{\\Theta} \\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right} \\mathrm{d} \\theta}$$ 吉中 $\\lambda_{1}, \\cdots, \\lambda_{m}$ 使得当 $\\pi=\\tilde{\\pi}$ 时式(2.6.5) 成立, 即 $$\\int_{\\Theta} g_{k}(\\theta) \\tilde{\\pi}(\\theta) \\mathrm{d} \\theta=\\mu_{k} \\quad(k=1, \\cdots, m)$$ 都成立. 求解步骤 确定$m,g_1(\\theta),\\cdots,g_k(\\theta)$ 化简$\\pi_{0}(\\theta) \\cdot \\exp \\left{\\sum_{k=1}^{m} \\lambda_{k} g_{k}(\\theta)\\right}$ $\\bar{\\pi}(\\theta) \\propto \\pi_{0}(\\theta) \\cdot exp {\\sum_{k=1}^{m} \\lambda_{k}g_{k}(\\theta)}$ 利用归一化常数A,带入$E^{\\bar{\\pi}}(g_k(\\theta)) = \\mu_k$求解$\\lambda_k$ 得出$\\bar{\\pi}(\\theta)$正比表达式 求归一化常数A 得出$\\theta$的最大熵先验$\\bar{\\pi}(\\theta)$ Reference先验最早由Bernardo(1979)提出多维场合修改的Jeffreys先验,将多维参数分为感兴趣的参数和多余(nuisance)参数基本思想:获得观测数据后,使得参数的先验分布和后验分布之间的K-L距离最大 Reference先验定义 设样本 $X=\\left(X_{1}, \\cdots, X_{n}\\right)$ 的分布族为 ${p(x \\mid \\theta), \\theta \\in$ $\\theta}$, 其中 $\\theta$ 为参数 (或参数向量), $\\Theta$ 为参数空间; $\\theta$ 的先验分布为 $\\pi(\\theta)$. 令 $\\mathscr{P}={\\pi(\\theta)&gt;$ $\\left.0: \\int_{\\Theta} \\pi(\\boldsymbol{\\theta} \\mid x) d \\boldsymbol{\\theta}&lt;\\infty\\right}$,此处 $\\pi(\\boldsymbol{\\theta} \\mid x)$ 为 $\\theta$ 的后验分布. 设先验分布 $\\pi(\\boldsymbol{\\theta})$ 与后验分布 $\\pi(\\boldsymbol{\\theta} \\mid \\boldsymbol{x})$ 的 $K-L$ 距离关于样本 $X$ 的期望为 $$ I_{\\pi(\\theta)}(\\boldsymbol{\\theta}, \\boldsymbol{x})=\\int_{\\mathscr{X}^{(n)}} p(\\boldsymbol{x})\\left[\\int_{\\Theta} \\pi(\\boldsymbol{\\theta} \\mid x) \\ln \\frac{\\pi(\\boldsymbol{\\theta} \\mid \\boldsymbol{x})}{\\pi(\\boldsymbol{\\theta})} \\mathrm{d} \\boldsymbol{\\theta}\\right] \\mathrm{d} \\boldsymbol{x} \\tag{1}$$ 其中 $\\mathscr{X}^{(n)}=\\mathscr{X}{1} \\times \\cdots \\times \\mathscr{X}{1}$ 为样本空间, $p(x)=\\int_{\\Theta} p(x \\mid \\theta) \\pi(\\boldsymbol{\\theta}) \\mathrm{d} \\boldsymbol{\\theta}$ 为样本 $\\mathrm{X}$ 的边缘密度. 若 $\\pi^{}(\\boldsymbol{\\theta}) \\in \\mathscr{P}$, 且满足 $$ I_{\\pi^{}(\\theta)}(\\theta, x)=\\max {\\pi(\\theta) \\in \\mathscr{P}} I{\\pi(\\theta)}(\\theta, x) \\tag{2} $$ 则称 $$\\pi^{*}(\\theta) = arg \\max {\\pi(\\theta) \\in \\mathscr{P}}I{\\pi(\\theta)}(\\theta, x) \\tag{3}$$ 为参数$\\theta$的Reference先验 Reference先验的计算 利用上式很难得到解析表达式,数值方法获得也很困难,替代办法是用渐进方法获得解析表达式 设X 表示一个简单试验的观测结果,向量$X^{(k)}=(X_1,\\cdots,X_k)$的分量由随机变量$X$的$k$个独立复制组成,令 $$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)=\\int_{x^{(k)}} p\\left(x^{(k)}\\right)\\left[\\int_{\\theta} \\pi\\left(\\theta \\mid x^{(k)}\\right) \\ln \\frac{\\pi\\left(\\theta \\mid x^{(k)}\\right)}{\\pi(\\theta)} \\mathrm{d} \\theta\\right] \\mathrm{d} x^{(k)} \\tag{4}$$ 通过最大化$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)$,得到$\\pi_{k}(\\theta)=\\arg \\max {\\pi(\\theta)} I{\\pi(\\theta)}\\left(\\theta,x^{(k)}\\right)$为了找到$\\pi_{k}$的更方便的形式,改写$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)$如下: $$\\begin{align}I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right) &amp;=\\int_{X^{(k)}} p\\left(x^{(k)}\\right)\\left[\\int_{\\theta} \\pi\\left(\\theta \\mid x^{(k)}\\right) \\ln \\frac{\\pi\\left(\\theta \\mid x^{(k)}\\right)}{\\pi(\\theta)} \\mathrm{d} \\theta\\right] \\mathrm{d} x^{(k)} \\&amp;=\\int_{\\theta} \\pi(\\theta)\\left{\\int_{X^{(k)}} p\\left(x^{(k)} \\mid \\theta\\right)\\left[\\ln \\pi\\left(\\theta \\mid x^{(k)}\\right)-\\ln \\pi(\\theta)\\right] \\mathrm{d} x^{(k)}\\right} \\mathrm{d} \\theta \\&amp;= \\int_{\\Theta} \\pi(\\theta) \\ln \\frac{f_{k}(\\theta)}{\\pi(\\theta)} \\mathrm{d} \\theta\\end{align} \\tag{5}$$ 此处 $$\\begin{align}f_{k}(\\theta)=\\exp \\left{\\int_{\\mathscr{x}^{-(k)}} p\\left(x^{(k)} \\mid \\theta\\right) \\ln \\pi\\left(\\theta \\mid x^{(k)}\\right) \\mathrm{d} x^{(k)}\\right} \\tag{6} \\此处 \\pi(\\theta|x^{(k)}) 近似 N(\\hat{\\theta},I(\\theta))\\end{align}$$利用拉格朗日求条件极值的方法,在$\\int \\pi(\\theta) \\mathrm{d} \\theta=1$的条件下求$$I_{\\pi(\\theta)}\\left(\\theta, x^{(k)}\\right)=\\int_{\\Theta} \\pi(\\theta) \\ln \\frac{f_{k}(\\theta)}{\\pi(\\theta)} \\mathrm{d} \\theta \\tag{7}$$ 的极大值.利用变分法求解,可知其解$\\pi_{k}(\\theta) \\propto f_{k}(\\theta)$. Berger 等(2009)证明了在适当条件下 $\\theta$ 的 Reference 先验为 $$\\pi^{*}(\\theta)=\\lim {k \\rightarrow \\infty} \\frac{f{k}(\\theta)}{f_{k}\\left(\\theta_{0}\\right)} \\tag{8}$$ 此处 $\\theta_{0}$ 是参数空间 $\\theta$ 的一个内点, $f_{k}(\\theta)$由式(6)给出. 当存在多余参数时 Reference 先验的计算 在我们所讨论的统计模型中,当参数是多维时,我们感兴趣的参数常常是其中的一个参数(或某些参数的子集),其余的视为多余参数.此时求多参数情形下的无信息先验,可利用 Reference 先验来处理. 其中的某些步聚可简化成一维的情形,通过计算 Jeffreys 先验获得.具体说明如下. 设似然函数为 $p(x \\mid \\theta, \\lambda)$, 此处 $\\theta$ 为感兴趣的参数, 而 $\\lambda$ 为多余参数. 我们希望找到 联合的无信息先验分布 $\\pi(\\theta, \\lambda)$. 处理这种带有多余参数的方法按下列步骤: &lt;!-- --&gt; (1) 固定$\\theta$,用标准的Reference先验方法获得$\\pi(\\lambda\\mid\\theta)$(如果$\\lambda$是一维的,将$\\theta$看成常数,计算Jeffreys 先验, 获得$\\pi(\\lambda \\mid \\theta)$). (2) 如果$\\pi(\\lambda\\mid\\theta)$是正常的先验,对$\\lambda$积分得到 $$ p(x \\mid \\theta)=\\int p(x \\mid \\theta, \\lambda) \\pi(\\lambda \\mid \\theta) \\mathrm{d} \\lambda \\tag{9} $$ (3) 用$p(x \\mid \\theta)$计算Reffreys先验,获得$\\pi(\\theta)$)(如果$\\theta$是一维的,利用$p(x|\\theta)$)计算Jeffreys先验,获得$\\pi(\\theta)$ (4) $\\theta$ 和 $\\lambda$的联合先验为 $\\pi(\\theta,\\lambda)=\\pi(\\lambda|\\theta)\\pi(\\theta)$ &lt;!-- --&gt; 两参数的Reference 先验的计算 设$\\theta=(\\theta_1,\\theta_2)$,其中$\\theta_1$为感兴趣的参数,$\\theta_2$为多余参数,令 $$ I\\left(\\theta_{1}, \\theta_{2}\\right)=\\left(\\begin{array}{ll} I_{11}\\left(\\theta_{1}, \\theta_{2}\\right) &amp; I_{12}\\left(\\theta_{1}, \\theta_{2}\\right) \\ I_{21}\\left(\\theta_{1}, \\theta_{2}\\right) &amp; I_{22}\\left(\\theta_{1}, \\theta_{2}\\right) \\end{array}\\right) \\tag{10} $$ 为$\\left(\\theta_{1}, \\theta_{2}\\right)$ 的Fisher信息阵. $\\left(\\theta_{1}, \\theta_{2}\\right)$的Reference先验可按下面四个步骤获得 &lt;!-- --&gt; (1) 求给定 $\\theta_{1}$ 时 $\\theta_{2}$ 的 Reference 先验 $\\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)$由于在一维的情形下Reference先验与Jeffreys先验相同, 所以取$\\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)=\\left|I_{22}\\left(\\theta_{1}, \\theta_{2}\\right)\\right|^{1 / 2}$.(2) 选取$\\left(\\theta_{1},\\theta_{2}\\right)$的参数空间$\\Theta$上的紧子集(一维闭区间或多维有限闭集概念的推广) $$ \\Theta_1\\subset\\Theta_2\\subset\\cdots,满足\\bigcup_{i=1}^{\\infty} \\Theta_i = \\Theta \\ 且对 \\forall \\theta_1,使得\\pi(\\theta_2|\\theta_1) \\quad 在集合 \\quad \\Omega_{i,\\theta_1} = {\\theta_2:(\\theta_1,\\theta_2)\\in\\Theta_i} \\quad 上是有限的 \\ 将 \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right)在 \\Omega_{i, \\theta_{1}}上正则化,得到 \\ $$ $$ \\pi_{i}\\left(\\theta_{2} \\mid \\theta_{1}\\right)=K_{i}\\left(\\theta_{1}\\right) \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) I_{\\Omega_{i, o_{1}}}\\left(\\theta_{2}\\right) \\tag{11} $$ 其中 $I_{A}(x)$ 表示集合 $A$ 上的示性函数,而$K_{i}\\left(\\theta_{1}\\right)=1 / \\int_{\\Omega_{i, 0},} \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) \\mathrm{d} \\theta_{2} .$(3) 求参数 $\\theta_{1}$ 关于$\\pi_{i}\\left(\\theta_{2} \\mid \\theta_{1}\\right)$ 的边缘Reference先验$\\pi_{i}\\left(\\theta_{1}\\right)$, 其公式为 $$\\pi_{i} (\\theta_1)=\\exp {\\frac{1}{2}\\int_{\\Omega_{i,\\theta_1}}\\pi_{i}(\\theta_{2} \\mid \\theta_{1})\\ln\\frac{|I(\\theta_{1}, \\theta_{2})|}{|I_{22}(\\theta_{1},\\theta_{2})|}d\\theta_{2} } \\tag{12}$$ 此处 $I\\left(\\theta_{1}, \\theta_{2}\\right)$ 和$I_{22}\\left(\\theta_{1}, \\theta_{2}\\right)$ 由式(10)给出 (4) 求极限得到$\\left(\\theta_{1}, \\theta_{2}\\right)$ 的 Reference 先验 $$\\pi\\left(\\theta_{1}, \\theta_{2}\\right)=\\lim {i \\rightarrow \\infty}\\left[\\frac{K{i}\\left(\\theta_{1}\\right) \\pi_{i}\\left(\\theta_{1}\\right)}{K_{i}\\left(\\theta_{10}\\right) \\pi_{i}\\left(\\theta_{10}\\right)}\\right] \\pi\\left(\\theta_{2} \\mid \\theta_{1}\\right) \\tag{13}$$ 比处假定极限存在, $\\theta_{10}$ 为任一固定点 例题1.设 $X \\sim N\\left(\\mu, \\sigma^{2}\\right)$.求$\\theta=\\left(\\mu, \\sigma^{2}\\right)$的(1) Jeffreys 先验(2) Reference先验 数学函数及统计方法$\\Gamma$函数$$\\Gamma(\\alpha) = \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx$$ $\\beta$函数离散分布伯努利分布（又称之为二点分布或者0-1分布） 密度分布函数 数字特征 性质 $\\theta$为伯努利试验中成功概率,失败概率为$1-\\theta$ $P(x)= \\theta^x(1-\\theta)^{1-x}$ 二项分布(N重伯努利实验)$X \\sim B(n,\\theta)$ 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 $\\theta$为伯努利试验中成功概率,失败概率为$1-\\theta$,则在n次独立的伯努利试验中，成功次数$X \\sim B(n,\\theta)$ $$P(X = k|\\theta) = C_k^n \\theta^k(1-\\theta)^{n-k} \\quad , k = 0,1,2,…,n $$ ## 负二项分布$Nb(r,\\theta)$,又称帕斯卡分布 已知一个事件在伯努利试验中每次的出现概率是p,在一连串伯努利试验中,一件事件刚好在第r+x次试验出现第r次的概率 密度分布函数 $$f(x;r,p) = C_{x}^{x+r-1}p^r(1-p)^x ,\\quad x=0,1,…$$ 数字特征 $$ \\begin{align} E[x] &amp; = np \\ Var[x] &amp;= np(1-p) \\ mod[x] &amp;=[(n+1)p] \\end{align} $$ 性质 多项分布随机实验如果有k个可能结局$A_1,A_2,…,A_k$，分别将他们的出现次数记为随机变量$X_1,X_2,…,X_k$，它们的概率分布分别是$p_1,p_2,…,p_k$，那么在n次采样的总结果中，$A_1$出现$n_1$次、$A_2$出现$n_2$次、…、$A_k$出现$n_k$次的这种事件的出现概率$P$有下面公式 密度分布函数 $$ \\begin{align} P(X_1=n_1,…,X_k=n_k;p_1,…,p_k) =&amp;\\left{\\begin{array}{l} \\frac{n!}{n_1!\\cdots n_k!} p_1^{n_1}\\cdots p_n^{n_k}, \\quad \\sum_{i=1}^{k}n_i=n, \\sum_{i=1}^{k}p_i=1\\ 0, otherwise \\end{array}\\right. \\ \\end{align} $$ 数字特征 $$ \\begin{align} E[x_1,\\cdots,x_k] &amp; = (np_1,\\cdots,np_k) \\ Var[x_i] &amp;= np_i(1-p_i) , \\quad i=1,\\cdots,k\\ mod[x] &amp;= \\end{align} $$ 性质 最大似然估计 $$ \\begin{align} 用拉格朗日陈志发，得到带参数限制的似然函数 \\ l(D|p_1,…,p_n,n) &amp; =ln(\\prod_{i=1}^{N} \\frac{n!}{n_{i1}!\\cdots n_{ik}!} )+(\\sum_{i=1}^{N}\\sum_{j=1}^{k} n_{ij}ln(p_j)) + \\alpha(1-\\sum_{j=1}^{k}p_j)\\ 对 p 求导 \\ \\frac{\\partial}{\\partial p_j}ln P(x|p) &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{p_j}-\\alpha = 0\\ \\Rightarrow p_j &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{\\alpha} \\Rightarrow 1=\\sum_{j=1}^{k}\\frac{\\sum_{i=1}^{N}n_{ij}}{\\alpha} \\Rightarrow \\alpha = N\\cdot k\\ p_j &amp;= \\frac{\\sum_{i=1}^{N}n_{ij}}{N\\cdot k} \\end{align} $$ 泊松分布(Poisson distribution) 密度分布函数 $$ \\begin{align} P(x=k;\\lambda) = \\frac{\\lambda^k}{k!}e^{-\\lambda},\\quad \\lambda&gt;0,k=0,1,… \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\lambda \\ Var[x] &amp;= \\lambda \\end{align} $$ 泊松分布的Jeffreys先验 $\\pi(\\theta) = \\sqrt{I(\\theta)} = \\sqrt{\\frac{n}{\\lambda}}$ $$ \\begin{align} f(x;\\lambda) &amp;= \\frac{\\lambda^x}{x!}e^{-\\lambda},\\quad \\lambda&gt;0,x=0,1,… \\ E[x] &amp;= \\lambda \\ L(\\lambda|x_1,…,x_n) &amp;= \\frac{\\lambda^{x_1+…+x_n}}{x_1!\\cdots x_n!}e^{-n\\lambda} \\ l(\\lambda|x_1,…,x_n) &amp;= \\sum_{i=1}^n x_iln(\\lambda)-n\\lambda+ln(x_1!\\cdots x_n!) \\ \\frac{\\partial}{\\partial \\lambda}ln f(x|\\lambda) &amp;= \\frac{\\sum_{i=1}^{n} x_i}{\\lambda}-n \\ \\frac{\\partial^2}{\\partial \\lambda^2}ln f(x|\\lambda) &amp;= -\\frac{\\sum_{i=1}^n x_i}{\\lambda^2}\\ I(\\lambda) &amp; = \\sum_{x_1,\\cdots,x_n =0}^{\\infty} \\frac{\\sum_{i=1}^n x_i}{\\lambda^2}\\frac{\\lambda^{x_1+…+x_n}}{x_1!\\cdots x_n!}e^{-n\\lambda} \\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125; \\sum_&#123;i=1&#125;^&#123;n&#125; [(\\sum_&#123;x_i=0&#125;^&#123;\\infty&#125; \\frac&#123;x_i\\lambda^&#123;x_i&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_i!&#125;) \\prod_&#123;j\\neq i&#125;^&#123;n&#125; (\\sum_&#123;x_j=0&#125;^&#123;\\infty&#125;\\frac&#123;\\lambda^&#123;x_j&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_j!&#125;)] \\\\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125; \\sum_&#123;i=1&#125;^&#123;n&#125; (\\sum_&#123;x_i=0&#125;^&#123;\\infty&#125; \\frac&#123;x_i\\lambda^&#123;x_i&#125;e^&#123;-\\lambda&#125;&#125;&#123;x_i!&#125;)\\\\ &amp; = \\frac&#123;1&#125;&#123;\\lambda^2&#125;\\sum_&#123;i=1&#125;^&#123;n&#125; \\lambda \\\\ &amp; = \\frac&#123;n&#125;&#123;\\lambda&#125; \\\\ \\pi(\\theta) &amp;= \\sqrt{I(\\theta)} = \\sqrt{\\frac{n}{\\lambda}} \\end{align} $$ 性质 连续分布均匀分布 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 指数分布 密度分布函数 $$ \\begin{align} f(x;\\lambda) = \\left{\\begin{array}{l} 0 ,\\quad x \\leq 0 \\ \\lambda e^{-\\lambda x}, \\theta &gt; 0 \\end{array}\\right. \\end{align} $$ 分布函数 $$ \\begin{align} F(x;\\lambda) = \\left{\\begin{array}{l} 0 ,\\quad x \\leq 0 \\ 1-e^{-\\lambda x}, x &gt; 0 \\end{array}\\right. \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\frac{1}{\\lambda} \\ Var[x] &amp;= \\frac{1}{\\lambda^2}\\ \\end{align} $$ 性质 无记忆性: $s,t\\geq 0 \\Rightarrow P(T&gt;s+t|T&gt;t) = P(T&gt;s)$ 正态分布 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 对数正态分布$LN(x;\\mu,\\sigma^2)$ 密度分布函数 $$ \\begin{align} &amp;LN(x;\\mu,\\sigma^2) = \\frac{1}{x\\sqrt{2\\pi\\sigma^2}}exp{-\\frac{1}{2\\sigma^2}(ln(x)-\\mu)^2 },\\quad x&gt;0 \\ &amp;\\mu是位置参数,\\sigma&gt;0 是刻度参数 \\end{align} $$ 数字特征 $$ \\begin{align} &amp; E(x)=e^{\\mu+\\frac{1}{2}\\sigma^2}, \\quad n&gt;1 \\ &amp; Var(x) = (e^{\\sigma^2}-1)e^{2\\mu+\\sigma^2}, \\quad n&gt;2\\ &amp; Mode(x) = e^{\\mu-\\sigma^2} \\end{align} $$ 性质 t分布 $\\tau(x;n,\\mu,\\sigma)$ 密度分布函数 $$ \\begin{align} \\tau(x;n,\\mu,\\sigma) = \\frac{1}{\\sigma}\\frac{\\Gamma(\\frac{n+1}{2})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{1}{n}(\\frac{x-\\mu}{\\sigma})^2)^{-\\frac{n+1}{2}} \\ n&gt;0 为自由度, \\mu为位置参数,\\sigma&gt;0为刻度参数 \\end{align} $$ 数字特征 $$ \\begin{align} &amp;E[x]=\\mu,n&gt;1 \\ &amp;Var[x] = \\frac{n\\sigma^2}{n-2},n&gt;2\\ &amp;Mode[x] = x \\ \\end{align} $$ 卡方分布$\\chi_{n}^2$ 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 F分布 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 伽马分布$\\Gamma(x;\\alpha,\\lambda)$ 密度分布函数 $$ \\begin{align} \\Gamma(x;\\alpha,\\lambda) =&amp;\\left{\\begin{array}{l} \\frac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} x^{\\alpha-1} e^{-\\lambda x}, x \\geq 0 \\ 0, x&lt;0 \\end{array}\\right. \\ \\Gamma(\\alpha) =&amp; \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\frac{\\alpha}{\\lambda} \\ Var[x] &amp;= \\frac{\\alpha}{\\lambda^2} \\ mod[x] &amp;= \\end{align} $$ 性质 逆伽马分布 密度分布函数 $$ \\begin{align} \\Gamma^{-1}(\\theta;\\alpha,\\lambda)=&amp; \\left{\\begin{array}{l} \\frac{\\lambda^{\\alpha}}{\\Gamma(\\alpha)} \\theta^{-(\\alpha+1)} \\exp \\left(-\\frac{\\lambda}{\\theta}\\right) \\quad, \\theta \\geq 0 \\ 0 \\quad, \\theta&lt;0 \\end{array}\\right. \\ \\Gamma(\\alpha) =&amp; \\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 帕雷托分布$Pa(\\theta_0,\\alpha)$ 密度分布函数 $$ \\begin{align} \\pi(\\theta;x_{min},k) &amp;=\\left{\\begin{array}{l} 0 ,\\quad \\theta \\leq x_{min}\\ \\frac{kx_{min}^{k}}{\\theta^{k+1}}, \\theta &gt; x_{min} \\end{array}\\right. \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 柯西分布 密度分布函数 $$ \\begin{align} f(x;) = \\end{align} $$ 数字特征 $$ \\begin{align} E[x] &amp; = \\ Var[x] &amp;= \\ mod[x] &amp;= \\end{align} $$ 性质 统计检验量单变量偏度系数(Skewness test of normality)$$\\sqrt{\\beta_1} = \\frac{E[(X-\\mu)^3]}{\\sigma_X^3}, \\mu_X= E[X],\\sigma_X^2=Var[X] \\样本偏度 :\\sqrt{b_1}=\\frac{\\frac{1}{n}\\sum_{i=1}^n (X_i-\\bar{X})^3}{(\\frac{1}{n}\\sum_{i=1}^n(X_i-\\bar{X})^2)^{3/2}} \\如果X是正态的,那么\\sqrt{b_1} \\sim N(0,\\frac{6}{n}) \\而对于有限的采样 Var(\\sqrt{b_1}) = \\frac{6(n-2)}{(n+1)(n+3)} 会使得 Type \\ I\\ error\\ rate与\\alpha相当$$ ## 多变量偏度系数 $$\\begin{align}\\beta_{1, d}=E[(X-\\mu)^{T} \\Sigma^{-1}(Y-\\mu)]^{3}\\end{align}$$ Under normality, $\\beta_{1, d}=0 .$ The multivariate skewness statisticis $$b_{1, d}=\\frac{1}{n^{2}} \\sum_{i, j=1}^{n}\\left(\\left(X_{i}-\\bar{X}\\right)^{T} \\widehat{\\Sigma}^{-1}\\left(X_{j}-\\bar{X}\\right)\\right)^{3}$$ t检验两正态样本t检验$$T(x, y)=\\frac{\\sqrt{\\frac{m n}{m+n}}(\\bar{x}-\\bar{y})}{\\sqrt{\\frac{1}{m+n-2}\\left[\\sum_{i=1}^{m}\\left(x_{i}-\\bar{x}\\right)^{2}+\\sum_{j=1}^{n}\\left(y_{i}-\\bar{y}\\right)^{2}\\right]}}$$","author":"爱养虫的小熊"}],"posts":[{"title":"addcount_number","slug":"addcount-number","date":"2021-11-11T12:02:48.000Z","updated":"2021-11-11T12:36:08.607Z","comments":true,"path":"/post/addcount-number.html","link":"","permalink":"https://rongkangxiong.top/post/addcount-number.html","excerpt":"Next 主题已经合并在NexT主题配置文件中找到 # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-word-counter symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false #允许排出代码块内所有内容，以便进行准确的单词计数 separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: true # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 2 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: &quot;mins.&quot; busuanzi统计NexT已经集成了busuanzi统计功能，只需要在主题配置文件_config.yml文件中将如下代码中的enable: flase改为enable: true即可 # Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi. # For more information: http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F; busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye","text":"Next 主题已经合并在NexT主题配置文件中找到 # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-word-counter symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false #允许排出代码块内所有内容，以便进行准确的单词计数 separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: true # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 2 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: &quot;mins.&quot; busuanzi统计NexT已经集成了busuanzi统计功能，只需要在主题配置文件_config.yml文件中将如下代码中的enable: flase改为enable: true即可 # Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi. # For more information: http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F; busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[],"author":"爱养虫的小熊"},{"title":"如何书写博客","slug":"writeblog","date":"2021-11-11T09:08:25.000Z","updated":"2021-11-11T11:46:49.047Z","comments":true,"path":"/post/writeblog.html","link":"","permalink":"https://rongkangxiong.top/post/writeblog.html","excerpt":"","text":"创建新文章git 中进入根目录输入 hexo new &lt;模板&gt; &lt;文章名&gt; 新建文章其中&lt;模板&gt;在source文件夹下面，默认有三个模板 post,draft,page 命令行输入 hexo new post aiticle_title 此时会在 source/_posts/ 文件夹中多了一个 aiticle_title.md 文件打开后可以看到 ---之间的内容为文章的配置内容 模板配置文件可以在/scaffolds/post.md修改post.md模板 --- title: &#123;&#123; title &#125;&#125; author: 爱养虫的小熊 date: &#123;&#123; date &#125;&#125; tags: [] categories: - [个人博客,Hexo] top: 1 feature: true mathjx: true #是否开启数学公式支持 common: true --- &lt;!--more--&gt; hexo-admin插件管理博客写作每次新建文章和写作文章都在git命令行中，很不方便，于是可以安装这款插件参考hexo-admin官方页面 npm install --save hexo-admin hexo g hexo s open http:&#x2F;&#x2F;localhost:4000&#x2F;admin&#x2F; 然后浏览器输入http://localhost:4000/admin/进入管理界面setting 我的笔记 复制下面生成的 Admin Config Section内容到 /blog/_config.yml粘贴在最后即可之后登陆需要输入账户密码 在Deploy之前，还要编辑网站配置文件_config.yml （否则会出现Error: Config value &quot;admin.deployCommand&quot; not found)报错如果实在Windows系统，这在末尾加上 deployCommand:&#39;hexo-generate.bat&#39;","categories":[],"tags":[]},{"title":"Next配置","slug":"config-next","date":"2021-11-11T03:14:00.000Z","updated":"2021-11-11T08:23:04.582Z","comments":true,"path":"/post/config-next.html","link":"","permalink":"https://rongkangxiong.top/post/config-next.html","excerpt":"写在开头点击跳转到文末 Hexo搭建的GitHub博客之优化大全https://zhuanlan.zhihu.com/p/33616481背景动画 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 打开站点配置文件_config.yml，搜索post_asset_folder字段，设置其值为true 安装hexo-asset-image：npm install hexo-asset-image –save 此时hexo new “fileName”会在/source/_posts目录下创建同名的文件夹 只需在 md 文件里使用 ![title](图片名.jpg) 无需路径名就可以插入图片。ps: 发现这样就不能启用创建文件自动打开编辑器功能自己创建文件夹即可","text":"写在开头点击跳转到文末 Hexo搭建的GitHub博客之优化大全https://zhuanlan.zhihu.com/p/33616481背景动画 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 打开站点配置文件_config.yml，搜索post_asset_folder字段，设置其值为true 安装hexo-asset-image：npm install hexo-asset-image –save 此时hexo new “fileName”会在/source/_posts目录下创建同名的文件夹 只需在 md 文件里使用 ![title](图片名.jpg) 无需路径名就可以插入图片。ps: 发现这样就不能启用创建文件自动打开编辑器功能自己创建文件夹即可 启用预览功能直接在文章中插入即可，此代码一下的需要点击 阅读更多 才能显示 &lt;!--more--&gt; 文章内部锚点跳转这个方式是由John Tsai给出的，分成两步： 定义一个锚(id)： &lt;span id&#x3D;&quot;jump&quot;&gt;跳转到的地方&lt;&#x2F;span&gt; 使用markdown语法： [点击跳转](#jump) 自己写的文章的跳转[名称](&#x2F;forder-to-you-file) 在 /mynotes/math 下的 common_dstribute.md文件可以通过一下代码实现跳转常用概率分布 mynotes 在 /mynotes/ 下的 index.md文件可以通过跳转 [mynotes](&#x2F;mynotes&#x2F;index.html) Introduction在/source/_post/ 文件夹下面(和本文件同文件夹)的introduction.md的文件可以通过来跳转 [Introduction](introduction.html) 站点文章置顶打开Myblog站点下node_modules/hexo-generator-index/lib/generator.js文件。代码全部替换为 &#39;use strict&#39;; var pagination &#x3D; require(&#39;hexo-pagination&#39;); module.exports &#x3D; function(locals)&#123; var config &#x3D; this.config; var posts &#x3D; locals.posts; posts.data &#x3D; posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; &#x2F;&#x2F; 两篇文章top都有定义 if(a.top &#x3D;&#x3D; b.top) return b.date - a.date; &#x2F;&#x2F; 若top值一样则按照文章日期降序排 else return b.top - a.top; &#x2F;&#x2F; 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; &#x2F;&#x2F; 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; &#x2F;&#x2F; 都没定义按照文章日期降序排 &#125;); var paginationDir &#x3D; config.pagination_dir || &#39;page&#39;; return pagination(&#39;&#39;, posts, &#123; perPage: config.index_generator.per_page, layout: [&#39;index&#39;, &#39;archive&#39;], format: paginationDir + &#39;&#x2F;%d&#x2F;&#39;, data: &#123; __index: true &#125; &#125;); &#125;; 打开文章添加top字段,设置数值，数值越大文章越靠前 --- layout: layout title: 标签1 date: 2017-08-18 15:41:18 tags: 标签1 top: 100 --- 参考链接https://www.jianshu.com/p/d23d67d318c7 Hexo博客NexT主题下添加字数统计和阅读时长 安装hexo-symbols-count-time npm install hexo-symbols-count-time --save 如果安装完报如下提醒，还需安装eslint npm install eslint --save 站点/_config.yml配置 symbols_count_time: symbols: true # 文章字数统计 time: true # 文章阅读时长 total_symbols: true # 站点总字数统计 total_time: true # 站点总阅读时长 exclude_codeblock: false # 排除代码字数统计 Next主题文件 themes/next/_config.yml # Post wordcount display settings # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time symbols_count_time: separated_meta: true # 是否另起一行（true的话不和发表时间等同一行） item_text_post: true # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长） item_text_total: false # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长） awl: 4 # Average Word Length wpm: 275 # Words Per Minute（每分钟阅读词数） suffix: mins. 参考链接https://github.com/RongkangXiong/hexo-symbols-count-time Hexo博客NexT主题下代码块复制功能为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo NexT主题博客的代码块复制功能配置。 在themes/next/layout/_third-party/下新建文件copy-code.swig，写入下面的内容： &#123;% if theme.codeblock.copy_button.enable %&#125; &lt;style&gt; .copy-btn &#123; display: inline-block; padding: 6px 12px; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; white-space: nowrap; vertical-align: middle; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; user-select: none; outline: 0; &#125; .highlight-wrap .copy-btn &#123; transition: opacity .3s ease-in-out; opacity: 0; padding: 2px 6px; position: absolute; right: 4px; top: 8px; &#125; .highlight-wrap:hover .copy-btn, .highlight-wrap .copy-btn:focus &#123; opacity: 1 &#125; .highlight-wrap &#123; position: relative; &#125; &lt;&#x2F;style&gt; &lt;script&gt; $(&#39;.highlight&#39;).each(function (i, e) &#123; var $wrap &#x3D; $(&#39;&lt;div&gt;&#39;).addClass(&#39;highlight-wrap&#39;) $(e).after($wrap) $wrap.append($(&#39;&lt;button&gt;&#39;).addClass(&#39;copy-btn&#39;).append(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;).on(&#39;click&#39;, function (e) &#123; var code &#x3D; $(this).parent().find(&#39;.code&#39;).find(&#39;.line&#39;).map(function (i, e) &#123; return $(e).text() &#125;).toArray().join(&#39;\\n&#39;) var ta &#x3D; document.createElement(&#39;textarea&#39;) document.body.appendChild(ta) ta.style.position &#x3D; &#39;absolute&#39; ta.style.top &#x3D; &#39;0px&#39; ta.style.left &#x3D; &#39;0px&#39; ta.value &#x3D; code ta.select() ta.focus() var result &#x3D; document.execCommand(&#39;copy&#39;) document.body.removeChild(ta) &#123;% if theme.codeblock.copy_button.show_result %&#125; if(result)$(this).text(&#39;&#123;&#123;__(&quot;post.copy_success&quot;)&#125;&#125;&#39;) else $(this).text(&#39;&#123;&#123;__(&quot;post.copy_failure&quot;)&#125;&#125;&#39;) &#123;% endif %&#125; $(this).blur() &#125;)).on(&#39;mouseleave&#39;, function (e) &#123; var $b &#x3D; $(this).find(&#39;.copy-btn&#39;) setTimeout(function () &#123; $b.text(&#39;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#39;) &#125;, 300) &#125;).append(e) &#125;) &lt;&#x2F;script&gt; &#123;% endif %&#125; 编辑themes/next/layout/_layout.njk文件，在文件末尾 &#123;&#123;- next_inject(&#39;bodyEnd&#39;) &#125;&#125; 前面对齐添加一行代码： &#123;% include &#39;_third-party&#x2F;copy-code.swig&#39; -%&#125; 添加按钮上显示的语言 在themes/next/languages/zh-CN.yml文件的post板块中添加下列代码： copy_button: 复制 copy_success: 复制成功 copy_failure: 复制失败 在主题配置文件themes/next/_config.yml中添加开关搜索codeblock codeblock: border_radius: copy_button: enable: true # Show text copy result show_result: true 重新生成 hexo clean &amp; hexo g 参考链接https://blog.csdn.net/Awt_FuDongLai/article/details/107466848 添加搜索功能 安装插件 npm install hexo-generator-search 查找主题配置文件themes/next/_config.yml中的local_search ： local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: manual #手动，按回车键或搜索按钮触发搜索 # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false Hexo添加文章时自动打开编辑器 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件(name.js) 如果没有这个scripts目录，则新建一个scripts目录 新建的JavaScript脚本文件可以任意取名通过这个脚本，我们用其来监听hexo new这个动作，并在检测到hexo new之后，执行编辑器打开的命令 如果你是windows平台的Hexo用户，则将下列内容写入你的脚本： var spawn &#x3D; require(&#39;child_process&#39;).exec; hexo.on(&#39;new&#39;, function(data)&#123; spawn(&#39;start &quot;markdown编辑器绝对路径.exe&quot; &#39; + data.path); &#125;); 如果你是Mac平台Hexo用户，则将下列内容写入你的脚本： var exec &#x3D; require(&#39;child_process&#39;).exec; hexo.on(&#39;new&#39;, function(data)&#123; exec(&#39;open -a &quot;markdown编辑器绝对路径.app&quot; &#39; + data.path); &#125;); 参考链接https://blog.csdn.net/weixin_39345384/article/details/80785373 多台电脑Hexo写作Blog同步新建一个分支。通过在GitHub上新建一个分支，来保存本地的原始文件，另一个分支来保存hexo生成的静态网页。这里详细介绍以下步骤。 在原始电脑上新建一个分支hexo，设置为默认分支，保存本地原始文件在 点击侧栏头像回到首页文末 点击跳转到开头","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/categories/Hexo/"},{"name":"NexT","slug":"Hexo/NexT","permalink":"https://rongkangxiong.top/categories/Hexo/NexT/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://rongkangxiong.top/tags/next/"}]},{"title":"newmenu","slug":"newmenu","date":"2021-11-10T17:58:21.000Z","updated":"2021-11-10T18:09:22.138Z","comments":true,"path":"/post/newmenu.html","link":"","permalink":"https://rongkangxiong.top/post/newmenu.html","excerpt":"","text":"为Hexo的Next主题增加自定义menu菜单现在Hexo使用的主题当中，Next主题是比较流行的，查看Next主题的_config.yml，其中有8个默认定义的menu菜单，分别是home、about、tags、categories、archives、schedule、sitemap、commonweal 。通过参考tags、categories两个菜单，可以实现菜单的定制化。 menu: home: &#x2F; || fa fa-home #首页 about: &#x2F;about&#x2F; || fa fa-user #关于 tags: &#x2F;tags&#x2F; || fa fa-tags #标签 categories: &#x2F;categories&#x2F; || fa fa-th #分类 read: &#x2F;categories&#x2F;read || fa fa-book #读书 archives: &#x2F;archives&#x2F; || fa fa-archive #归档 mynotes: &#x2F;mynotes&#x2F; || fa fa-sticky-note #我的笔记 #schedule: &#x2F;schedule&#x2F; || fa fa-calendar #日历 sitemap: &#x2F;sitemap.xml || fa fa-sitemap #站点地图，供搜索引擎爬取 #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat #腾讯公益404 # &quot;||&quot; 前面是目标链接，后面是图标名称，图标库http:&#x2F;&#x2F;www.fontawesome.com.cn&#x2F;faicons&#x2F;#web-application","categories":[],"tags":[]},{"title":"个人博客图床资源获取","slug":"materialsite","date":"2021-11-10T04:31:49.000Z","updated":"2021-11-10T05:19:31.911Z","comments":true,"path":"/post/materialsite.html","link":"","permalink":"https://rongkangxiong.top/post/materialsite.html","excerpt":"","text":"图床","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"资源","slug":"资源","permalink":"https://rongkangxiong.top/tags/%E8%B5%84%E6%BA%90/"},{"name":"图片","slug":"图片","permalink":"https://rongkangxiong.top/tags/%E5%9B%BE%E7%89%87/"}]},{"title":"Introduction","slug":"introduction","date":"2021-11-10T03:14:00.000Z","updated":"2021-11-10T17:24:20.804Z","comments":true,"path":"/post/introduction.html","link":"","permalink":"https://rongkangxiong.top/post/introduction.html","excerpt":"","text":"相遇即是缘分博客初建，入站须知欢迎来到我的世界，这是我的个人博客本博客是基于Hexo框架搭建，采用hexo-theme-next主题并加以改进后期也会不定时增加新的功能，敬请期待！！！","categories":[{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/categories/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"}],"tags":[{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/tags/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"}]},{"title":"First Blog-制作个人博客","slug":"Firstblog","date":"2021-11-09T15:02:32.000Z","updated":"2021-11-11T09:25:28.386Z","comments":true,"path":"/post/Firstblog.html","link":"","permalink":"https://rongkangxiong.top/post/Firstblog.html","excerpt":"自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 HEXO搭建步骤 安装git 安装Node.js，选择LTS版本就行 安装Hexo Github建立个人仓库 生成SSH添加到GitHub 将Hexo部署到GitHub 设置个人域名 发布文章","text":"自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 HEXO搭建步骤 安装git 安装Node.js，选择LTS版本就行 安装Hexo Github建立个人仓库 生成SSH添加到GitHub 将Hexo部署到GitHub 设置个人域名 发布文章 安装hexoWindows检查安装是否成功node -v npm -v 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下(或者在这个文件夹下直接右键git bash打开) 开始安装Hexo输入命令 npm install -g hexo-cli 你会发现出现 changed 57 packages in 6s 1 package is looking for funding run &#96;npm fund&#96; for details 这不是报错，只是开发者寻求捐赠支持翻译：1个包正在寻找资金，运行 npm fund了解详细信息 初始化Hexohexo init myblog 当下载很慢的时候可以更换源 淘宝npm镜像 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com 阿里源 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org npm config list 输入代码检查换源是否成功过 npm config list 然后 cd myblog &#x2F;&#x2F;进入这个myblog文件夹 npm install hexo g 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public: 存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 继续输入 hexo g hexo server 打开hexo的服务，在浏览器输入localhost:4000就可以在本地看到你生成的博客 修改配置文件 _config.ymldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io.git branch: main 注意空格还有对齐 安装deploy-git也就是部署的命令,这样你才能用命令部署到GitHub npm install hexo-deployer-git --save 然后确认是否连接成功 ssh -T git@github.com 会出现让你确认密码 hexo clean hexo generate hexo deploy 其中hexo clean清除了你之前生成的东西，也可以不加。hexo generate 顾名思义，生成静态文章，可以用hexo g缩写hexo deploy 部署文章，可以用hexo d缩写 出现一下信息表示部署成功 Branch &#39;master&#39; set up to track remote branch &#39;main&#39; from &#39;https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io&#39;. INFO Deploy done: git 过一会儿就可以在 http://yourname.github.io 这个网站看到你的博客了 问题出现 OpenSSL SSL_read: Connection was reset, errno 10054 git config --global http.sslVerify &quot;false&quot; &#96;&#96;&#96;自己购买域名和服务器，搭建博客的成本比较高，光是搭建和维护，就对大多数人来说，没有这样的精力和时间。 直接在github平台上托管我们的博客，就可以安心写作，而不需要定期维护。 # Hexo简介 Hexo是一款基于Node.js的静态博客框架，依赖少，易于安装使用，可以方便生成静态网页托管在GitHub或者Coding上。 # HEXO搭建步骤 1. 安装[git](https:&#x2F;&#x2F;git-scm.com&#x2F;download&#x2F;win) 2. 安装[Node.js](https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;)，选择LTS版本就行 3. 安装Hexo 4. Github建立个人仓库 5. 生成SSH添加到GitHub 6. 将Hexo部署到GitHub 7. 设置个人域名 8. 发布文章 # 安装hexo ### Windows检查安装是否成功 &#96;&#96;&#96;git node -v npm -v 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下(或者在这个文件夹下直接右键git bash打开) 开始安装Hexo输入命令 npm install -g hexo-cli 你会发现出现 changed 57 packages in 6s 1 package is looking for funding run &#96;npm fund&#96; for details 这不是报错，只是开发者寻求捐赠支持翻译：1个包正在寻找资金，运行 npm fund了解详细信息 初始化Hexohexo init myblog 当下载很慢的时候可以更换源 淘宝npm镜像 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com 阿里源 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org npm config list 输入代码检查换源是否成功过 npm config list 然后 cd myblog &#x2F;&#x2F;进入这个myblog文件夹 npm install hexo g 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public: 存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 继续输入 hexo g hexo server 打开hexo的服务，在浏览器输入localhost:4000就可以在本地看到你生成的博客 修改配置文件 _config.ymldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io.git branch: main 这里 repo内容可以换为： git@github.com:RongkangXiong&#x2F;RongkangXiong.github.io.git 从而避免每次都要输入密码 注意空格还有对齐 安装deploy-git也就是部署的命令,这样你才能用命令部署到GitHub npm install hexo-deployer-git --save 然后确认是否连接成功 ssh -T git@github.com 会出现让你确认密码 hexo clean hexo generate hexo deploy 其中hexo clean清除了你之前生成的东西，也可以不加。hexo generate 顾名思义，生成静态文章，可以用hexo g缩写hexo deploy 部署文章，可以用hexo d缩写 快速代码为: hexo clean &amp; hexo g &amp; hexo d 出现一下信息表示部署成功 Branch &#39;master&#39; set up to track remote branch &#39;main&#39; from &#39;https:&#x2F;&#x2F;github.com&#x2F;RongkangXiong&#x2F;RongkangXiong.github.io&#39;. INFO Deploy done: git 过一会儿就可以在 http://yourname.github.io 这个网站看到你的博客了 hexo基本配置在文件根目录下的 _config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 网站| 参数 | 描述 | 作用| - | :-: | -: | -: || title | 网站标题 | ||subtitle|网站副标题| ||description| 网站描述| 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词 ||author |您的名字| 显示文章的作者 ||language |网站使用的语言| ||timezone |网站时区Hexo，比如说：America/New_York, Japan和 UTC| 默认使用您电脑的时区 | 网址| 参数 | 描述 | 操作 || - | :-: | :-: | :-: ||url|网址| url改成你的网站域名||root|网站根目录| ||permalink |文章的 永久链接 格式| 生成某个文章时候的链接格式，官方给出的永久链接变量很多 ||permalink_defaults |永久链接中各部分的默认值| 运行Hexo服务器在127.0.0.1::8080 上启动服务器 hexo server -i 127.0.0.1 -p 8080 问题出现 OpenSSL SSL_read: Connection was reset, errno 10054git config --global http.sslVerify &quot;false&quot; 更换主题觉得默认的landscape主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦 Hexo主题安装教程进入官网的主题，选择喜欢主题，点击链接进入github界面然后复制 Code 的 HTTPS 或者 Github CLI链接 git clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-hueman.git themes&#x2F;hueman 如果下载不了可以下载zip解压到 themes/hueman 下面也可以用GitHub桌面端进行Clone 安装搜索系统安装评论系统npm install valine --save 参考链接： Hexo 更换主题 hexo史上最全搭建教程 aurora主题 魔改aurora主题 vuepress-theme-aurora主题","categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/tags/Hexo/"},{"name":"网站","slug":"网站","permalink":"https://rongkangxiong.top/tags/%E7%BD%91%E7%AB%99/"},{"name":"Github","slug":"Github","permalink":"https://rongkangxiong.top/tags/Github/"}]},{"title":"如何制作输出电子笔记","slug":"HowtoWriteNotes","date":"2021-11-09T15:02:32.000Z","updated":"2021-11-10T03:56:28.380Z","comments":true,"path":"/post/HowtoWriteNotes.html","link":"","permalink":"https://rongkangxiong.top/post/HowtoWriteNotes.html","excerpt":"","text":"How to Write MyNotes通过 plantuml绘制流程图 支持类型MindMap diagramSequence diagramUsecase diagramClass diagram 插入代码Python代码删去&#96; &#96; &#96;之间的空格 &#96; &#96; &#96;python def helloworld(): print(&quot;helloworld&quot;) &#96; &#96; &#96; 得到效果 def helloworld(): print(&quot;hello world&quot;)","categories":[{"name":"个人博客制作","slug":"个人博客制作","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"笔记","slug":"笔记","permalink":"https://rongkangxiong.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Notes","slug":"Notes","permalink":"https://rongkangxiong.top/tags/Notes/"}]}],"categories":[{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/categories/Hexo/"},{"name":"NexT","slug":"Hexo/NexT","permalink":"https://rongkangxiong.top/categories/Hexo/NexT/"},{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/categories/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"},{"name":"个人博客制作","slug":"个人博客制作","permalink":"https://rongkangxiong.top/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://rongkangxiong.top/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://rongkangxiong.top/tags/next/"},{"name":"资源","slug":"资源","permalink":"https://rongkangxiong.top/tags/%E8%B5%84%E6%BA%90/"},{"name":"图片","slug":"图片","permalink":"https://rongkangxiong.top/tags/%E5%9B%BE%E7%89%87/"},{"name":"入站须知","slug":"入站须知","permalink":"https://rongkangxiong.top/tags/%E5%85%A5%E7%AB%99%E9%A1%BB%E7%9F%A5/"},{"name":"个人博客","slug":"个人博客","permalink":"https://rongkangxiong.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://rongkangxiong.top/tags/Hexo/"},{"name":"网站","slug":"网站","permalink":"https://rongkangxiong.top/tags/%E7%BD%91%E7%AB%99/"},{"name":"Github","slug":"Github","permalink":"https://rongkangxiong.top/tags/Github/"},{"name":"笔记","slug":"笔记","permalink":"https://rongkangxiong.top/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Notes","slug":"Notes","permalink":"https://rongkangxiong.top/tags/Notes/"}]}